# How to create a quick and dirty .deb

Sometimes you need a .deb with a recent version of Cgreen to install
for your development. And you don't want, or can't, wait for the
package maintainer to keep up...

## Build a package

You can build a simple .tar.gz using `make package`. Depending on how
`CMake` is configured you will get a couple of tar/zip file that you
can start from.

Once created they are located in the build directory. Pick one.

NB: It seems this does not build the library and `cgreen-runner`
correctly wrt. options set. Particularly it does not manage to create
a `cgreen-runner` and a library that agrees on support for `libxml2`
even if the normal build does. I solved this by simply copying the
library and the `cgreen-runner` from a normal build into the packaging
directory.

## Prepare a packaging directory

Create a separate directory somewhere, say `cgreen-deb`, and extract
the selected package there. You should now have a directory like
`cgreen-1.6.1_amd64`.

Create a new subdirectory `DEBIAN` inside it. Copy the file
`debian/control` from the repo to `DEBIAN/control`.

Update the `Architecture:` field and ensure that the version is
correct.

Depending on the packaging the lib-files might have been stored in a
subdirectory rather than directly in <root>/lib. For Ubuntu they
should be in `<root>/lib/x86_64-linux-gnu`.

## Make the .deb

In the examples below `1.6.1` is of course just an example...

In the directory where you now have your unpacked package content (in
the example above `cgreen-deb`) run

    $ dpkg-deb --build --root-owner-group cgreen-1.6.1-x86_64-linux-gnu

That should create `cgreen-1.6.1_amd64.deb`.

## Test it

You can run

    $ lintian cgreen-1.6.1-x86_64-linux-gnu.deb

and try to fix most of the errors and warnings.

NOTE we are not making a real distro packaging!

Verify that

    $ sudo dpkg -i cgreen-1.6.1_amd64.deb

installs the files correctly. And that

    $ sudo dpkg -r cgreen

removes them.
