        <section xml:id="collector">
         <title>The collector tool</title>
            <para>
                When we want to add a new test, we open the test script and create a new
                void function. So we add the name of the function inside of TestSuite.
                                
                In summary each new test added we should added inside of TestSuite too.                
            </para>
            <para>
                The <emphasis role="strong">collector</emphasis> tool change this
                boring behaviour. The idea is to save work of add every tests written inside
                of <code>TestSuite</code>. Basically each test is to be declared with the macro
                <emphasis role="strong">Ensure</emphasis> in which is automatically inserted
                inside of <code>TestSuite</code>.
            </para>                                             
        </section>
        <section xml:id="collector_example">
          <title>Example</title>
            <para>
                To use the collector tool we need to modify the definition of each functions.
                Before we used:
<programlisting>
void one_should_assert_char_equal_to_one() {
	char x = 1;
	char y = 1;
    assert_equal(x, y);
}
</programlisting>
                Now we need to rewrite to:
<programlisting>
<emphasis role="strong">Ensure</emphasis> one_should_assert_char_equal_to_one() {
	char x = 1;
	char y = 1;
    assert_equal(x, y);
}
</programlisting>
                
                For each writen test, we must declared like <emphasis role="strong">Ensure</emphasis> type. 
                It is a C macro and tell to collector that this test should be put inside the TestSuite.                
                </para>
                <para>
                In the TestSuite we don't more need to write the testes with compound the TestSuite. Just let
                like:
<programlisting>                
TestSuite *assertion_tests() {
    TestSuite *suite = create_test_suite();
    add_tests();
    return suite;
}                
</programlisting>                                
                Assuming that our test script is the file <filename>assertion_tests.c</filename>, 
                running the 'collector' we have:
<screen>                
./collector assertion_tests.c
</screen>

The finally result in test script is:
<programlisting>
Ensure one_should_assert_char_equal_to_one() {
	char x = 1;
	char y = 1;
    assert_equal(x, y);
}

TestSuite *assertion_tests() {
    TestSuite *suite = create_test_suite(&amp;one_should_assert_char_equal_to_one);
    add_tests();
    return suite;
}
</programlisting>
          </para>
          <para>
                The tool read all script, do the necessary substituitions and write to the
                original file.
                So just add a new test and run the collector tool to adjust automatically the
                TestSuite.
          </para>
        </section>
