        <section xml:id="extending">
         <title>Replacing the reporter</title>
            <para>
                In every test suite so far, we have run the tests
                with this line...
<programlisting>
return run_test_suite(our_tests(), <emphasis role="strong">create_text_reporter()</emphasis>);
</programlisting>
                We can change the reporting mechanism just by changing this
                method.
                Here is the code for <code>create_text_reporter()</code>...
<programlisting>
TestReporter *create_text_reporter() {
    TestReporter *reporter = create_reporter();
    reporter->start = &amp;text_reporter_start;
    reporter->finish = &amp;text_reporter_finish;
    reporter->show_fail = &amp;show_fail;
    reporter->show_incomplete = &amp;show_incomplete;
    return reporter;
}
</programlisting>
                The <code>TestReporter</code> structure contains function
                pointers that control the reporting.
                When called from <code>create_reporter()</code> constructor, these
                pointers are set up with functions that display nothing.
                The text reporter code replaces these with something more
                dramatic, and then returns a pointer to this new object.
                Thus the <code>create_text_reporter()</code> function effectively
                extends the object from <code>create_reporter()</code>.
            </para>
            <para>
                The text reporter only outputs content at the start of the first test,
                at the end of the test run to display the results, when a failure
                occours, and when a test fails to complete.
                A quick look at the <filename>text_reporter.c</filename> file in <filename>Cgreen</filename>
                reveals that the overrides just output a message and
                chain to the versions in <filename>reporter.h</filename>.
            </para>
            <para>
                To change the reporting mechanism ourselves, we just have to know a little
                about the methods in the <code>TestReporter</code> structure.
            </para>
        </section>
        <section xml:id="base">
          <title>The TestReporter structure</title>
            <para>
                The Cgreen <code>TestReporter</code> is a pseudo class that looks
                something like...
<programlisting>
typedef struct _TestReporter TestReporter;
struct _TestReporter {
    void (*destroy)(TestReporter *);
    void (*start)(TestReporter *, const char *);
    void (*finish)(TestReporter *, const char *);
    void (*show_pass)(TestReporter *, const char *, int, const char *, va_list);
    void (*show_fail)(TestReporter *, const char *, int, const char *, va_list);
    void (*show_incomplete)(TestReporter *, const char *);
    void (*assert_true)(TestReporter *, const char *, int, int, const char *, ...);
    int passes;
    int failures;
    int exceptions;
    void *breadcrumb;
    int ipc;
    void *memo;
};
</programlisting>
                The first block are the methods that can be overridden.
                <variablelist>
                  <varlistentry>
                    <term><code>void (*destroy)(TestReporter *)</code></term>
                      <listitem><para>This is the destructor for the default structure.
                        If this is overridden, then the overriding function
                        must call <code>destroy_reporter(TestReporter *reporter)</code>
                        to finish the clean up.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>void (*start)(TestReporter *, const char *)</code></term>
                      <listitem><para>                        The first of the callbacks.
                        At the start of each test suite <emphasis>Cgreen</emphasis> will
                        call this method on the reporter with the name of the
                        suite being entered.
                        The default version keeps track of the stack of tests
                        in the <code>breadcrumb</code> pointer of
                        <code>TestReporter</code>.
                        If you make use of the breadcrumb functions, as the defaults
                        do, then you will need to call <code>reporter_start()</code> to
                        keep the book keeping in sync.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>void (*finish)(TestReporter *, const char *)</code></term>
                      <listitem><para>The counterpart to the <code>(*start)()</code> call called
                        on leaving the test suite.
                        It needs to be chained to the <code>reporter_finish()</code>
                        to keep track of the breadcrumb book keeping.
                        The text reporter uses the state of the breadcrumb to decide
                        if it is ending teh top level test.
                        If so, it prints the familiar summary of passes and fails.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>void (*show_pass)(TestReporter *, const char *, int, const char *, va_list)</code></term>
                      <listitem><para>This method is initially empty, so there is no need to chain
                        the call to any other function.
                        Besides the pointer to the reporter structure, <emphasis>Cgreen</emphasis>
                        also passes the file name of the test, the line number of failed
                        assertion, the message to show and any additional parameters to
                        substitute into the message.
                        The message comes in as <code>printf()</code> style format string,
                        and so the variable argument list should match the substitutions.</para></listitem>
                  </varlistentry>
                  
                  <varlistentry>
                    <term><code>void (*show_fail)(TestReporter *, const char *, int, const char *, va_list)</code></term>
                      <listitem><para>The partner of <code>show_pass()</code>, and the one you'll likely
                        overload first.</para></listitem>
                  </varlistentry>
                  
                  <varlistentry>
                    <term><code>void (*show_incomplete)(TestReporter *, const char *)</code></term>
                      <listitem><para>When a test fails to complete, this is the handler that is called.
                        As it's an unexpected outcome, no message is received, but
                        we do get the name of the test.
                        The text reporter combines this with the breadcrumb to produce the
                        exception report.</para></listitem>
                  </varlistentry>                  
                  <varlistentry>
                    <term><code>void (*assert_true)(TestReporter *, const char *, int, int, const char *, ...)</code></term>
                      <listitem><para>This is not normally overridden and is really internal.
                        It is the raw entry point for the test messages from the test suite.
                        By default it dispatches teh call to either <code>show_pass()</code>
                        or <code>show_fail()</code>.</para></listitem>
                  </varlistentry>
                  
                </variablelist>   
                The second block is simply resources and book keeping that the reporter
                can use to liven up the messages...
                <variablelist>
                  <varlistentry>
                    <term><code>passes</code></term>
                      <listitem><para>The number of passes so far.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>passes</code></term>
                      <listitem><para>The number of passes so far.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>failures</code></term>
                      <listitem><para>The number of failures generated so far.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>exceptions</code></term>
                      <listitem><para>The number of test functions that have failed to complete so far.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>breadcrumb</code></term>
                      <listitem><para>This is a pointer to the list of test names in the stack.</para></listitem>
                  </varlistentry>
                </variablelist>
                The <code>breadcrumb</code> pointer is different and needs a
                little explanation.
                Basically it is a stack, analagous to the breadcrumb trail you
                see on websites.
                Everytime the <code>start()</code> handler is invoked, the
                name is placed in this stack.
                When the <code>finish()</code> message handler is invoked, a
                name is popped off.
            </para>
            <para>
                There are a bunch of utility functions in <filename>cgreen/breadcrumb.h</filename>
                that can read the state of this stack.
                Most useful are <code>get_current_from_breadcrumb()</code> which
                takes the breadcrumb pointer and returns the curent test name,
                and <code>get_breadcrumb_depth()</code> which gives the current
                depth of the stack.
                A depth of zero means that the test run has finished.
            </para>
            <para>
                If you need to traverse all the names in the breadcrumb,
                then you can call <code>walk_breadcrumb()</code>.
                Here is the full signature...
<programlisting>
void walk_breadcrumb(Breadcrumb *breadcrumb, void (*walker)(const char *, void *), void *memo);
</programlisting>
                The <code>void (*walker)(const char *, void *)</code> is a callback
                that will be passed the name of the test suite for each
                level of nesting.
                It is also poassed the <code>memo</code> pointer that was
                passed to the <code>walk_breadcrumb()</code> call.
                You can use this pointer for anything you want, as
                all <emphasis>Cgreen</emphasis> does is pass it from call to call.
                This is so aggregate information can be kept track of whilst
                still being reentrant.
            </para>
            <para>
                The last parts of the <code>TestReporter</code> structure are...
                <variablelist>
                  <varlistentry>
                    <term><code>ipc</code></term>
                      <listitem><para>This is an internal structure for handling the messaging between
                        reporter and test suite.
                        You shouldn't touch this.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>memo</code></term>
                      <listitem><para>By contrast, this is a spare pointer for your own expansion.</para></listitem>
                  </varlistentry>
                </variablelist>
            </para>
        </section>
        <section xml:id="example"> 
        <title>An example XML reporter</title>
            <para>
                Let's make things real with an example.
                Suppose we want to send the output from <emphasis>Cgreen</emphasis> in XML format,
                say for storing in a repository or for sending across the network.
            </para>
            <para>
                Suppose also that we have come up with the following format...
<screen><![CDATA[
<?xml?>
<test name="Top Level">
    <test name="A Group">
        <test name="a_test_that_passes">
        </test>
        <test name="a_test_that_fails">
            <fail>
                <message>A failure</message>
                <location file="test_as_xml.c" line="8"/>
            </fail>
        </test>
    </test>
</test>
]]></screen>
                In other words a simple nesting of tests with only failures
                encoded.
                The absence of failure is a pass.
            </para>
            <para>
                Here is a test script, <filename>test_in_xml.c</filename> that we can use to construct the
                above output...
<programlisting>
#include "cgreen/cgreen.h"

void <emphasis role="strong">a_test_that_passes()</emphasis> {
    assert_true(1);
}

void <emphasis role="strong">a_test_that_fails()</emphasis> {
    assert_true_with_message(0, <emphasis role="strong">"A failure"</emphasis>);
}

TestSuite *create_test_group() {
    TestSuite *suite = <emphasis role="strong">create_named_test_suite("A Group")</emphasis>;
    add_test(suite, a_test_that_passes);
    add_test(suite, a_test_that_fails);
    return suite;
}

int main(int argc, char **argv) {
    TestSuite *suite = <emphasis role="strong">create_named_test_suite("Top Level")</emphasis>;
    add_suite(suite, create_test_group());
    return run_test_suite(suite, <emphasis role="strong">create_text_reporter()</emphasis>);
}
</programlisting>
                The text reporter is used just to confirm that everything
                is working.
                So far it is.
<screen>
Running "Top Level"...
Failure!: A Group -> a_test_that_fails -> A failure at [test_as_xml.c] line [8]
Completed "Top Level": 1 pass, 1 failure, 0 exceptions.
</screen>
            </para>
            <para>
                Our first move is to switch the reporter from text, to our
                not yet written XML version...
<programlisting>
#include "cgreen/cgreen.h<emphasis role="strong">
#include "xml_reporter.h"</emphasis>

...

int main(int argc, char **argv) {
    TestSuite *suite = create_named_test_suite("Top Level");
    add_suite(suite, create_test_group());
    return run_test_suite(suite, <emphasis role="strong">create_xml_reporter()</emphasis>);
}
</programlisting>
                We'll start the ball rolling with the <filename>xml_reporter.h</filename>
                header file...
<programlisting>
#ifndef _XML_REPORTER_HEADER_
#define _XML_REPORTER_HEADER_
<emphasis role="strong">
#include "cgreen/reporter.h"

TestReporter *create_xml_reporter();</emphasis>

#endif
</programlisting>
                ...and the simplest possible reporter in <filename>reporter.c</filename>.
<programlisting>
#include "xml_reporter.h"
#include "cgreen/reporter.h"

TestReporter *create_xml_reporter() {
    TestReporter *reporter = create_reporter();
    return reporter;
}
</programlisting>
                One that outputs nothing.
<screen>
gcc -c test_as_xml.c
gcc -c xml_reporter.c
gcc xml_reporter.o test_as_xml.o -lcgreen -o xml
./xml
</screen>
                Yep, nothing.
            </para>
            <para>
                Let's add the outer test tags first, so that we can see
                <emphasis>Cgreen</emphasis> navigating the test suite...
<programlisting>
#include "xml_reporter.h"
#include "cgreen/reporter.h"<emphasis role="strong">
#include &lt;stdio.h&gt;

static void xml_reporter_start(TestReporter *reporter, const char *name);
static void xml_reporter_finish(TestReporter *reporter, const char *name);</emphasis>

TestReporter *create_xml_reporter() {
    TestReporter *reporter = create_reporter();<emphasis role="strong">
    reporter->start = &amp;xml_reporter_start;
    reporter->finish = &amp;xml_reporter_finish;</emphasis>
    return reporter;
}
<emphasis role="strong">
static void xml_reporter_start(TestReporter *reporter, const char *name) {
    printf("&lt;test name=\"%s\"&gt;\n", name);
    reporter_start(reporter, name);
}

static void xml_reporter_finish(TestReporter *reporter, const char *name) {
    reporter_finish(reporter, name);
    printf("&lt;/test&gt;\n");
}</emphasis>
</programlisting>
                Although chaining to the underlying <code>reporter_start()</code>
                and <code>reporter_finish()</code> functions is optional, I want to
                make use of some of the facilities later.
            </para>
            <para>
                Our output meanwhile, is making it's first tentative steps...
<screen>
<![CDATA[
<test name="Top Level">
<test name="A Group">
<test name="a_test_that_passes">
</test>
<test name="a_test_that_fails">
</test>
</test>
</test>
]]>
</screen>
                We don't want a passing message, so the <code>show_fail()</code> function is all we
                need...
<programlisting>
...<emphasis role="strong">
static void xml_show_fail(TestReporter *reporter, const char *file, int line, const char *message, va_list arguments);</emphasis>

TestReporter *create_xml_reporter() {
    TestReporter *reporter = create_reporter();
    reporter->start = &amp;xml_reporter_start;
    reporter->finish = &amp;xml_reporter_finish;<emphasis role="strong">
    reporter->show_fail = &amp;xml_show_fail;</emphasis>
    return reporter;
}

...
<![CDATA[
<emphasis role="strong">
static void xml_show_fail(TestReporter *reporter, const char *file, int line, const char *message, va_list arguments) {
    printf("<fail>\n");
    printf("\t<message>");
    vprintf(message, arguments);
    printf("]]&gt;</message>\n");
    printf("\t<location file=\"%s\" line=\"%d\"/>\n", file, line);
    printf("</fail>\n");
}</emphasis>
]]>
</programlisting>
                We have to use <code>vprintf()</code> to handle the variable argument
                list passed to us.
                This will probably mean including the <filename>stdarg.h</filename> header
                as well as <filename>stdio.h</filename>.
            </para>
            <para>
                This gets us pretty close to what we want...
<screen>
<![CDATA[
<test name="Top Level">
<test name="A Group">
<test name="a_test_that_passes">
</test>
<test name="a_test_that_fails">
<fail>
    <message>A failure]]&gt;</message>
    <location file="test_as_xml.c" line="9"/></fail>
</test>
</test>
</test>
]]>
</screen>
                For completeness we should add a tag for an incomplete test.
                We'll output this as a failure, athough we don't get a location this
                time...
<programlisting>
<emphasis role="strong">static void xml_show_incomplete(TestReporter *reporter, const char *name) {
    printf("&lt;fail&gt;\n");
    printf("\t&lt;message&gt;Failed to complete]]&gt;&lt;/message&gt;\n");
    printf("&lt;/fail&gt;\n");
}</emphasis>
</programlisting>
                All that's left then is the XML declaration and the thorny issue of
                indenting.
                Although the indenting is not strictly necessary, it would make the
                output a lot more readable.
            </para>
            <para>
                The test depth is kept track of for us with the <code>breadcrumb</code>
                object in the <code>TestReporter</code> structure.
                We'll add an <code>indent()</code> function that outputs the
                correct number of tabs...
<programlisting>
static indent(TestReporter *reporter) {
    int depth = <emphasis role="strong">get_breadcrumb_depth((Breadcrumb *)reporter->breadcrumb)</emphasis>;
    while (depth-- > 0) {
        printf("\t");
    }
}
</programlisting>
                The <code>get_breadcrumb_depth()</code> function just gives the
                current test depth.
                As that is just the number of tabs to output, the implementation
                is trivial.
            </para>
            <para>
                We can then use this function in the rest of the code.
                Here is the complete listing...
<programlisting>
#include "xml_reporter.h"
#include "cgreen/reporter.h"
#include "cgreen/breadcrumb.h"
#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;
<emphasis role="strong">
static indent(TestReporter *reporter);</emphasis>
static void xml_reporter_start(TestReporter *reporter, const char *name);
static void xml_reporter_finish(TestReporter *reporter, const char *name);
static void xml_show_fail(TestReporter *reporter, const char *file, int line, const char *message, va_list arguments);
static void xml_show_incomplete(TestReporter *reporter, const char *name);

TestReporter *create_xml_reporter() {
    TestReporter *reporter = create_reporter();
    reporter->start = &amp;xml_reporter_start;
    reporter->finish = &amp;xml_reporter_finish;
    reporter->show_fail = &amp;xml_show_fail;
    reporter->show_incomplete = &amp;xml_show_incomplete;
    return reporter;
}
<emphasis role="strong">
static indent(TestReporter *reporter) {
    int depth = get_breadcrumb_depth((Breadcrumb *)reporter->breadcrumb);
    while (depth-- > 0) {
        printf("\t");
    }
}</emphasis>

static void xml_reporter_start(TestReporter *reporter, const char *name) {<emphasis role="strong">
    if (get_breadcrumb_depth((Breadcrumb *)reporter->breadcrumb) == 0) {
        printf("&lt;?xml?&gt;\n");
    }
    indent(reporter);</emphasis>
    printf("&lt;test name=\"%s\"&gt;\n", name);
    reporter_start(reporter, name);
}

static void xml_reporter_finish(TestReporter *reporter, const char *name) {
    reporter_finish(reporter, name);
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;/test&gt;\n");
}

static void xml_show_fail(TestReporter *reporter, const char *file, int line, const char *message, va_list arguments) {
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;fail&gt;\n");
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("\t&lt;message&gt;");
    vprintf(message, arguments);
    printf("]]&gt;&lt;/message&gt;\n");
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("\t&lt;location file=\"%s\" line=\"%d\"/&gt;\n", file, line);
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;/fail&gt;\n");
}

static void xml_show_incomplete(TestReporter *reporter, const char *name) {
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;fail&gt;\n");
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("\t&lt;message&gt;Failed to complete]]&gt;&lt;/message&gt;\n");
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;/fail&gt;\n");
}
</programlisting>
                And finally the desired output...
<screen>
<![CDATA[
<?xml?>
<test name="Top Level">
    <test name="A Group">
        <test name="a_test_that_passes">
        </test>
        <test name="a_test_that_fails">
            <fail>
                <message>A failure]]&gt;</message>
                <location file="test_as_xml.c" line="9"/>
            </fail>
        </test>
    </test>
</test>
]]>
</screen>
                Job done.
            </para>
            <para>
                Possible other extensions include reporters that write to <emphasis>syslog</emphasis>,
                talk to IDE plug-ins, paint pretty printed documents or just return a boolean
                for monitoring purposes.
            </para>
        </section>
