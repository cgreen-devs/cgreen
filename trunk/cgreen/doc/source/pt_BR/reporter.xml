        <section xml:id="extending">
         <title>Trocando o relatório</title>
            <para>
                Em toda suite de teste, nos temos que executar os testes com
                esta linha...
<programlisting>
return run_test_suite(our_tests(), <emphasis role="strong">create_text_reporter()</emphasis>);
</programlisting>
                Nos podemos mudar o mecanismo de relatório somente trocando este
                método.
                Aqui está um código para <code>create_text_reporter()</code>...
<programlisting>
TestReporter *create_text_reporter() {
    TestReporter *reporter = create_reporter();
    reporter->start = &amp;text_reporter_start;
    reporter->finish = &amp;text_reporter_finish;
    reporter->show_fail = &amp;show_fail;
    reporter->show_incomplete = &amp;show_incomplete;
    return reporter;
}
</programlisting>
                A estrutura <code>TestReporter</code> contem ponteiros de função 
                no qual controlam o relatório.
                Quando chamadas pelo construtor <code>create_reporter()</code>, estes
                ponteiros são configurados com funções que não mostram nada.
                O código do relatório de texto troca estas com alguma coisa mais dramática
                , e então retorna um ponteiro para o novo objeto.
                Desta maneira a função <code>create_text_reporter()</code> efetivamente
                extende o objeto a partir de <code>create_reporter()</code>.
            </para>
            <para>
                O relatório de texto somente mostra o conteúdo partir do início do
                primeiro teste, até o final dos testes, quando uma falha ocorre e quando um teste
                falha para completar.
                
                Uma pequena olhada no arquivo <filename>text_reporter.c</filename> do <emphasis>Cgreen</emphasis>
                revela que sobrepõem somente a saída da mensagem e encadeia para a versão 
                de <filename>reporter.h</filename>.
            </para>
            <para>
                Para mudarmos o mecanisco de relatório, basta conhecermos um 
                pouco sobre os métodos da estrutura <code>TestReporter</code>.
            </para>
        </section>
        <section xml:id="base">
          <title>A estrutura do TestReporter</title>
            <para>
                O <code>TestReporter</code> do Cgreen é uma pseudo classe que se parece
                como...
<programlisting>
typedef struct _TestReporter TestReporter;
struct _TestReporter {
    void (*destroy)(TestReporter *);
    void (*start)(TestReporter *, const char *);
    void (*finish)(TestReporter *, const char *);
    void (*show_pass)(TestReporter *, const char *, int, const char *, va_list);
    void (*show_fail)(TestReporter *, const char *, int, const char *, va_list);
    void (*show_incomplete)(TestReporter *, const char *);
    void (*assert_true)(TestReporter *, const char *, int, int, const char *, ...);
    int passes;
    int failures;
    int exceptions;
    void *breadcrumb;
    int ipc;
    void *memo;
};
</programlisting>
                O primeiro bloco são métodos que podem ser sobrepostos.                
                <variablelist>
                  <varlistentry>
                    <term><code>void (*destroy)(TestReporter *)</code></term>
                    <listitem><para>Este é o destrutor para a estrutura default.
                        Se for sobreposto, então a função sobreposta necessita chamar
                        <code>destroy_reporter(TestReporter *reporter)</code> para finalizar e 
                        limpar.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>void (*start)(TestReporter *, const char *)</code></term>
                    <listitem><para>A primeira das callbacks. No começo de cada suite de
                        teste <emphasis>Cgreen</emphasis> vai chamar este método dentro do 
                        relatório com o nome da suite iniciada.
                        A versão default mantem o registro da pilha de testes dentro do 
                        ponteiro <code>breadcrumb</code> para <code>TestReporter</code>.
                        Se você faz uso das funções breadcrumb, como por default faz, então você
                        precisa chamar <code>reporter_start()</code> para manter os registros
                        sincronizados.</para></listitem>
                  </varlistentry>
                  <varlistentry>      
                    <term><code>void (*finish)(TestReporter *, const char *)</code></term>
                    <listitem><para>Do outro lado a chamada para <code>(*start)()</code> é feita
                        quando a suite de teste é deixada. 
                        Ela precisa ser encadeiada pelo <code>reporter_finish()</code> para
                        manter o registro de breadcrumb.
                        O próximo relatório usa o estado do breadcrumb para decidir se 
                        ele está no fim do teste.
                        Se esta, ele imprime o sumário familiar de falhas e sucessos.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>void (*show_pass)(TestReporter *, const char *, int, const char *, va_list)</code></term>
                      <listitem><para>Este método é inicializado vazio, então não é necessário encadear a 
                        chamada para nenhuma outra função.
                        Além disso o ponteiro para a estrutura de relatório, <emphasis>Cgreen</emphasis>
                        também passa o nome do arquivo do teste, o número da linha da assertion falhada,
                        a mensagem para mostrar e qualquer parâmetro adicional para ser 
                        substituido dentro da mensagem.
                        A mensagem vem no estilo <code>printf()</code> de formatação de string,
                        e então a lista de argumento variável faz as substituições.</para></listitem>
                  </varlistentry>
                  <varlistentry>                  
                    <term><code>void (*show_fail)(TestReporter *, const char *, int, const char *, va_list)</code></term>
                      <listitem><para>O parceiro do <code>show_pass()</code>, e é uma das que gostariamos
                        de sobrepor primeiro.</para></listitem>
                  </varlistentry>                      
                  <varlistentry>                                            
                    <term><code>void (*show_incomplete)(TestReporter *, const char *)</code></term>
                      <listitem><para>Quando um teste falha, este é o handle que é chamado.
                        Como ele é um resultado inexperado, nenhuma mensagem é recebida, mas
                        faz chegar o nome do teste.
                        O relatório do teste combina isto com o breadcrumb para produzir
                        a exceção no relatório.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>void (*assert_true)(TestReporter *, const char *, int, int, const char *, ...)</code></term>
                    <listitem><para>Isto não é normalmente sobreposto e é interno.
                        Ele é ponto de entrada para as mensagesm de teste a partir da suite de teste.
                        Por default isto dispacha a chamada para <code>show_pass()</code> ou 
                        <code>show_fail()</code>.</para></listitem>
                  </varlistentry>
                </variablelist>      
                O segundo bloco é somente recursos e registro no qual o relatório pode usar
                para exibir as mensagens...
                <variablelist>
                  <varlistentry>
                    <term><code>passes</code></term>
                      <listitem><para>O número de sucesso gerado até agora.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>failures</code></term>
                      <listitem><para>O número de falhas geradas até agora.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>exceptions</code></term>
                      <listitem><para>O números de funções testadas que falharam em completar até agora.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>breadcrumb</code></term>
                      <listitem><para>Este é um ponteiro para a lista de nomes dentro da stack.</para></listitem>
                  </varlistentry>
                </variablelist>
                O ponteiro <code>breadcrumb</code> é diferente e necessita de uma pequena
                explanação.
                Basicamente ele é uma pilha, análogo a breadcrumb trail que você vê em websites.
                Todo vez que o handle <code>start()</code> é invocado, o nome é colocado dentro da stack.
                Quando o handle <code>finish()</code> é invocado, o nome é retirado da stack. 
            </para>
            <para>
                Há um monte de funções uteis em <filename>cgreen/breadcrumb.h</filename>
                no qual podem ajudar a ler o estado do stack.
                As mais uteis são <code>get_current_from_breadcrumb()</code> no qual pega
                um ponteiro breadcrumb e retorna o nome do teste corrente, e 
                <code>get_breadcrumb_depth()</code> no qual retorna a atual profundidade
                da stack.
                Uma profundidade zero significa que a execução do teste acabou.            
            </para>
            <para>
                Se você precisa atravessar todos os nomes dentro do breadcrumb, então 
                você pode chamar <code>walk_breadcrumb()</code>.
                Aqui está a assinatura completa...
<programlisting>
void walk_breadcrumb(Breadcrumb *breadcrumb, void (*walker)(const char *, void *), void *memo);
</programlisting>
                O <code>void (*walker)(const char *, void *)</code> é uma callback que vai 
                ser passada o nome da suite de teste para cada nível aninhado.
                Ele também passa o ponteiro <code>memo</code> que foi passado para a chamada
                <code>walk_breadcrumb()</code>.
                Você pode usar este ponteiro para qualquer coisa que você queira, como o
                <emphasis>Cgreen</emphasis> faz é passar de chamada para chamada.
                Trata-se de um agregado de informações mantendo o registro e ainda reentrantes. 
            </para>
            <para>
                As últimas partes da estrutura do <code>TestReporter</code> são...            
                <variablelist>
                  <varlistentry>
                    <term><code>ipc</code></term>
                      <listitem><para>Isto é uma estrutura interna para manipular as mensagem entre o 
                        relatório e a suite de testes.
                        Você não preciso mexer nisto.</para></listitem>
                  </varlistentry>
                  <varlistentry>
                    <term><code>memo</code></term>
                      <listitem><para>Isto é um ponteiro livre para sua própria expansão.</para></listitem>
                  </varlistentry>
                </variablelist>
            </para>
        </section>
        <section xml:id="example">
        <title>Um exemplo de relatório XML</title>
            <para>
                Vamos fazer coisas reais com um exemplo.
                Suponha que queiremos enviar a saída do <emphasis>Cgreen</emphasis> no formato
                XML, para armazenar em um repositório ou para enviar atravez da rede.
            </para>
            <para>
                Suponha também que ele venha com o seguinte formato...
<screen><![CDATA[
<?xml?>
<test name="Top Level">
    <test name="A Group">
        <test name="a_test_that_passes">
        </test>
        <test name="a_test_that_fails">
            <fail>
                <message>A failure</message>
                <location file="test_as_xml.c" line="8"/>
            </fail>
        </test>
    </test>
</test>
]]></screen>
                Em outras palavras um simples aninhamento de testes com somente as
                falhas reportadas.
                A ausência da falha é o sucesso do teste.
            </para>
            <para>
                Aqui esta um script de teste <filename>test_in_xml.c</filename> no qual nos podemos usar
                para construir a saída acima...
<programlisting>
#include "cgreen/cgreen.h"

void <emphasis role="strong">a_test_that_passes()</emphasis> {
    assert_true(1);
}

void <emphasis role="strong">a_test_that_fails()</emphasis> {
    assert_true_with_message(0, <emphasis role="strong">"A failure"</emphasis>);
}

TestSuite *create_test_group() {
    TestSuite *suite = <emphasis role="strong">create_named_test_suite("A Group")</emphasis>;
    add_test(suite, a_test_that_passes);
    add_test(suite, a_test_that_fails);
    return suite;
}

int main(int argc, char **argv) {
    TestSuite *suite = <emphasis role="strong">create_named_test_suite("Top Level")</emphasis>;
    add_suite(suite, create_test_group());
    return run_test_suite(suite, <emphasis role="strong">create_text_reporter()</emphasis>);
}
</programlisting>
                O relatório texto é usado somente para confirmar se tudo está funcionando
                Até agora ele esta.
<screen>
Running "Top Level"...
Failure!: A Group -> a_test_that_fails -> A failure at [test_as_xml.c] line [8]
Completed "Top Level": 1 pass, 1 failure, 0 exceptions.
</screen>
            </para>
            <para>
                Nosso primeiro movimento é trocar o relatório de texto, para o nosso ainda
                não escrito na versão em XML...
<programlisting>
#include "cgreen/cgreen.h<emphasis role="strong">
#include "xml_reporter.h"</emphasis>

...

int main(int argc, char **argv) {
    TestSuite *suite = create_named_test_suite("Top Level");
    add_suite(suite, create_test_group());
    return run_test_suite(suite, <emphasis role="strong">create_xml_reporter()</emphasis>);
}
</programlisting>
                Nos iniciaremos com o arquivo de cabeçalho <filename>xml_reporter.h</filename>...
<programlisting>
#ifndef _XML_REPORTER_HEADER_
#define _XML_REPORTER_HEADER_
<emphasis role="strong">
#include "cgreen/reporter.h"

TestReporter *create_xml_reporter();</emphasis>

#endif
</programlisting>
                ...e o relatório mais simplista possível em <filename>reporter.c</filename>.
<programlisting>
#include "xml_reporter.h"
#include "cgreen/reporter.h"

TestReporter *create_xml_reporter() {
    TestReporter *reporter = create_reporter();
    return reporter;
}
</programlisting>
                A saída não é nada.                
<screen>
gcc -c test_as_xml.c
gcc -c xml_reporter.c
gcc xml_reporter.o test_as_xml.o -lcgreen -o xml
./xml
</screen>
                Ainda, nada.
            </para>
            <para>
                Vamos adicionar as tags primeiro, de modo que possamos ver o <emphasis>Cgreen</emphasis>
                navegar na test suite...
<programlisting>
#include "xml_reporter.h"
#include "cgreen/reporter.h"<emphasis role="strong">
#include &lt;stdio.h&gt;

static void xml_reporter_start(TestReporter *reporter, const char *name);
static void xml_reporter_finish(TestReporter *reporter, const char *name);</emphasis>

TestReporter *create_xml_reporter() {
    TestReporter *reporter = create_reporter();<emphasis role="strong">
    reporter->start = &amp;xml_reporter_start;
    reporter->finish = &amp;xml_reporter_finish;</emphasis>
    return reporter;
}
<emphasis role="strong">
static void xml_reporter_start(TestReporter *reporter, const char *name) {
    printf("&lt;test name=\"%s\"&gt;\n", name);
    reporter_start(reporter, name);
}

static void xml_reporter_finish(TestReporter *reporter, const char *name) {
    reporter_finish(reporter, name);
    printf("&lt;/test&gt;\n");
}</emphasis>
</programlisting>
                Apesar do encadeamento subjacente as funções <code>reporter_start()</code>
                e <code>reporter_finish()</code> são opcionais, eu quero fazer uso de
                algumas facilidades depois.
            </para>
            <para>
                Nossa saída por enquanto, é fazer a tentativa em passos...                
<screen>
<![CDATA[
<test name="Top Level">
<test name="A Group">
<test name="a_test_that_passes">
</test>
<test name="a_test_that_fails">
</test>
</test>
</test>
]]>
</screen>
                Nos não queremos uma mensagem de sucesso, então a função <code>show_fail()</code>
                é tudo oque precisamos...
<programlisting>
...<emphasis role="strong">
static void xml_show_fail(TestReporter *reporter, const char *file, int line, const char *message, va_list arguments);</emphasis>

TestReporter *create_xml_reporter() {
    TestReporter *reporter = create_reporter();
    reporter->start = &amp;xml_reporter_start;
    reporter->finish = &amp;xml_reporter_finish;<emphasis role="strong">
    reporter->show_fail = &amp;xml_show_fail;</emphasis>
    return reporter;
}

...
<![CDATA[
<emphasis role="strong">
static void xml_show_fail(TestReporter *reporter, const char *file, int line, const char *message, va_list arguments) {
    printf("<fail>\n");
    printf("\t<message>");
    vprintf(message, arguments);
    printf("]]&gt;</message>\n");
    printf("\t<location file=\"%s\" line=\"%d\"/>\n", file, line);
    printf("</fail>\n");
}</emphasis>
]]>
</programlisting>
                Nos temos que usar <code>vprintf()</code> para manipular a lista de argumento
                variável passada para nós.
                Isto irá provavelmente significar a inclusão do cabeçalho <filename>stdarg.h</filename>
                bem como <filename>stdio.h</filename>.                
            </para>
            <para>
                Isto nos aproxima do que queremos...
<screen>
<![CDATA[
<test name="Top Level">
<test name="A Group">
<test name="a_test_that_passes">
</test>
<test name="a_test_that_fails">
<fail>
    <message>A failure]]&gt;</message>
    <location file="test_as_xml.c" line="9"/></fail>
</test>
</test>
</test>
]]>
</screen>
                Para completar devemos adicionar uma tag para um teste incompleto.
                Nos vamos visualizar isto como uma falha, entretando nos não vamos saber
                a localização por enquanto...
<programlisting>
<emphasis role="strong">static void xml_show_incomplete(TestReporter *reporter, const char *name) {
    printf("&lt;fail&gt;\n");
    printf("\t&lt;message&gt;Failed to complete]]&gt;&lt;/message&gt;\n");
    printf("&lt;/fail&gt;\n");
}</emphasis>
</programlisting>
                Tudo oque vem depois é a declaração XML e a identação.
                Entretanto a identação não é estritamente necessária, isto pode fazer a
                saída muito mais clara.
            </para>
            <para>
                A profundidade do teste é registrada para nos com o objeto <code>breadcrumb</code>
                dentro da estrutura <code>TestReporter</code>.
                Nos vamos adicionar a função <code>indent()</code> que imprime o correto
                número de tabs...
<programlisting>
static indent(TestReporter *reporter) {
    int depth = <emphasis role="strong">get_breadcrumb_depth((Breadcrumb *)reporter->breadcrumb)</emphasis>;
    while (depth-- > 0) {
        printf("\t");
    }
}
</programlisting>
                A função <code>get_breadcrumb_depth()</code> somente dá a profundidade
                atual do teste.
                Como é apenas o número de tabs para imprimir, a implementação é trivial.                
            </para>
            <para>
                Nos podemos então usar esta função no restante do código.
                Aqui está a listagem completa...
<programlisting>
#include "xml_reporter.h"
#include "cgreen/reporter.h"
#include "cgreen/breadcrumb.h"
#include &lt;stdio.h&gt;
#include &lt;stdarg.h&gt;
<emphasis role="strong">
static indent(TestReporter *reporter);</emphasis>
static void xml_reporter_start(TestReporter *reporter, const char *name);
static void xml_reporter_finish(TestReporter *reporter, const char *name);
static void xml_show_fail(TestReporter *reporter, const char *file, int line, const char *message, va_list arguments);
static void xml_show_incomplete(TestReporter *reporter, const char *name);

TestReporter *create_xml_reporter() {
    TestReporter *reporter = create_reporter();
    reporter->start = &amp;xml_reporter_start;
    reporter->finish = &amp;xml_reporter_finish;
    reporter->show_fail = &amp;xml_show_fail;
    reporter->show_incomplete = &amp;xml_show_incomplete;
    return reporter;
}
<emphasis role="strong">
static indent(TestReporter *reporter) {
    int depth = get_breadcrumb_depth((Breadcrumb *)reporter->breadcrumb);
    while (depth-- > 0) {
        printf("\t");
    }
}</emphasis>

static void xml_reporter_start(TestReporter *reporter, const char *name) {<emphasis role="strong">
    if (get_breadcrumb_depth((Breadcrumb *)reporter->breadcrumb) == 0) {
        printf("&lt;?xml?&gt;\n");
    }
    indent(reporter);</emphasis>
    printf("&lt;test name=\"%s\"&gt;\n", name);
    reporter_start(reporter, name);
}

static void xml_reporter_finish(TestReporter *reporter, const char *name) {
    reporter_finish(reporter, name);
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;/test&gt;\n");
}

static void xml_show_fail(TestReporter *reporter, const char *file, int line, const char *message, va_list arguments) {
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;fail&gt;\n");
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("\t&lt;message&gt;");
    vprintf(message, arguments);
    printf("]]&gt;&lt;/message&gt;\n");
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("\t&lt;location file=\"%s\" line=\"%d\"/&gt;\n", file, line);
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;/fail&gt;\n");
}

static void xml_show_incomplete(TestReporter *reporter, const char *name) {
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;fail&gt;\n");
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("\t&lt;message&gt;Failed to complete]]&gt;&lt;/message&gt;\n");
    <emphasis role="strong">indent(reporter);</emphasis>
    printf("&lt;/fail&gt;\n");
}
</programlisting>
                E finalmente a saída desejada...
<screen>
<![CDATA[
<?xml?>
<test name="Top Level">
    <test name="A Group">
        <test name="a_test_that_passes">
        </test>
        <test name="a_test_that_fails">
            <fail>
                <message>A failure]]&gt;</message>
                <location file="test_as_xml.c" line="9"/>
            </fail>
        </test>
    </test>
</test>
]]>
</screen>
                Trabalho concluído.
            </para>
            <para>
                Possivelmente outras extensões incluem relatórios que escrevem para <emphasis>syslog</emphasis>,
                integração com IDE, imprimir documentos ou somente retornar um boleano para
                propósitos de monitoramento.                
            </para>
        </section>
