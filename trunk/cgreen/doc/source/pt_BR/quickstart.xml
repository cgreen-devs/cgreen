<section name="what">
  <title>O que é Cgreen?</title>
      <para>
                Cgreen é um testador de código unitário para desenvolvimento
                software na linguagem C.                
                Ou seja é uma ferramenta de automação de teste e garantia de 
                qualidade de software para times de desenvolvimento.
                A ferramenta é completamenta open source e publicada sob a 
                <link xlink:href="http://www.gnu.org/licenses/lgpl.html">LGPL</link>.
      </para>
      <para>
                Testes unitários é uma prática de desenvolvimento popularizada
                pela comunidade de desenvolvimento ágil.
                É caracterizada pela escrita de muitos pequenos testes ao longo
                do código fonte normal.
                Frequentemente os testes são escritos antes do código que será
                testado, em um rigoroso loop de teste e refatoração de código.
                Feito deste modo, é uma prática conhecida como Desenvolvimento
                Dirigido ao Teste (Test Driven Development TDD).
                Cgreen suporta este estilo de trabalho.
      </para>
      <para>
                Testes de unidade são escritos na mesma linguagem que o código,
                no nosso caso C.
                Isto evita confusão pela constante troca de linguagem, e também
                permite utilizar qualquer parte do código nos seus testes.
      </para>
      <para>
                A lista de recuros é:
                <itemizedlist mark='opencircle'>
                    <listitem><para>Suite de Testes totalmente combináveis.</para></listitem>
                    <listitem><para><code>setup()</code> e <code>teardown()</code> para
                        testes e suite de teste.</para></listitem>
                    <listitem><para>Cada teste é executado por seu próprio processo.</para></listitem>
                    <listitem><para>Um teste isolado pode ser executado em um único processo
                        para debug.</para></listitem>
                    <listitem><para>Abilidade para criar funções mock.</para></listitem>
                    <listitem><para>O mecanismo de relatório pode ser facilmente extendido.</para></listitem>
                </itemizedlist>
                Esta ferramenta é para programação em C, não para C++.
      </para>
  </section>
  <section xml:id="install">
    <title>Instalando o Cgreen</title>
      <para>
                Há dois modos de instalar o Cgreen em seu sistema.
      </para>
      <para>                     
                O primeiro modo é utilizar os pacotes RPM ou DEB providos pelo Cgreen Time
                e disponibilizados na página do projeto
<link xlink:href="http://cgreen.sourceforge.net">Cgreen</link>.
                Uma vez feito o download, instale utilizando os procedimentos normais de
                instalação para o seu sistema.
      </para>   
      <para>             
                A segunda forma de instalação é indicada para desenvolvedores ou usuários avançados.
                Basicamente consiste em pegar os fontes do projeto e compilar. Para isso é necessário
                o sistema de build <link xlink:href="http://www.cmake.org">CMake</link> como pré-requisito.
      </para>
      <para>
                Tendo o CMake instalado o processo é o seguinte:
<screen>
tar -zxpvf cgreen.tar.gz
mkdir cgreen-build
cd cgreen-build
cmake ../cgreen
make
make test    # opcional
make install # precisa de direitos root
</screen> 
                Esta técnica é conhecida como "build out of source". Ela compila e instala o Cgreen
                fora do diretório que contendo os arquivos fontes. Isso ajuda na organização geral dos 
                arquivos do projeto. 
      </para>
      <para>
                Também é possivel utilizar o arquivo <filename>Makefile</filename> disponibilizado 
                na raiz do diretório descompactado. Este Makefile é usado para compilar e testar 
                sem a necessidade do CMake. No entando ele não contém as regras de instalação no
                sistema.
      </para>                
      <para>
                Ambos os métodos irão criar dentro do diretório <emphasis>cgreen</emphasis> uma biblioteca
                unix <filename>libcgreen.so</filename> no qual pode ser utilizada em conjunto com o               
                arquivo de cabeçalho <filename>cgreen.h</filename> para compilar os códigos de
                teste. A biblioteca criada é instalada no sistema, por default em <emphasis>/usr/local/lib/</emphasis>.                
      </para>
      <para>
                Agora vamos escrever um teste para confirmar se tudo está 
                funcionando.
                Vamos começar com um simples script de teste não testado, chamado
                <filename>first_test.c</filename>
<programlisting>
<emphasis role="strong">#include "cgreen/cgreen.h"</emphasis>

int main(int argc, char **argv) {<emphasis role="strong">
TestSuite *suite = create_test_suite();
return run_test_suite(suite, create_text_reporter());</emphasis>
}
</programlisting>
                Este é um teste muito sem graça.
                Somente cria uma suite de teste vazia e executa.
                Geralmente é mais fácil avançar em pequenos passos, porém,
                isso é o mais pequeno eu poderia pensar.
                A única complicação é o arquivo de cabeçalho <filename>cgreen.h</filename>.
                Aqui estou assumindo que nós temos um link simbólico com o diretório
                do Cgreen no mesmo lugar dos nossos scripts de testes, ou colocando
                o diretório Cgreen no seu path.
      </para>
      <para>
            	Fazer um build desse teste, com certeza, é algo trivial...
<screen>
gcc -c first_test.c
gcc first_test.o <emphasis role="strong">-lcgreen</emphasis> -o first_test
./first_test
</screen>
                Invocando o executável teremos...
<screen>
Running "main"...
Completed "main": 0 passes, 0 failures, 0 exceptions.
</screen>
                Tudo anteriormente assume que você está trabalhando em um ambiente
                tipo Unix, provavelmente com o compilador <emphasis>gcc</emphasis>.
                O código é bastante aderente ao C99, de modo que qualquer compilador C
                deve funcionar.
                Cgreen pode ser compilador em todos os sistemas que suportam a 
                biblioteca de mensagens <filename>sys/msg.h</filename>.
                Foi testado em Linux e Mac OSX, mas não no Windows, apesar que 
                pode trabalhar também.
      </para>
      <para>
                Até agora, temos ensaiado a compilação, em que a suite de teste é
                executada.
                Vamos acrescentar um ou dois ensaios sem sentido, para que você
                possa ver como isto ocorre...
<programlisting>
#include "cgreen/cgreen.h"
<emphasis role="strong">
void this_test_should_pass() {
assert_true(1);
}

void this_test_should_fail() {
assert_true(0);
}
</emphasis>
int main(int argc, char **argv) {
TestSuite *suite = create_test_suite();<emphasis role="strong">
add_test(suite, this_test_should_pass);
add_test(suite, this_test_should_fail);</emphasis>
return run_test_suite(suite, create_text_reporter());
}
</programlisting>
                Um teste pode ser qualquer função com a assinatura <code>void (void)</code>
                <code>add_test()</code> é uma macro, então
                não há <code>&amp;</code> com o ponteiro para a função.
      </para>
      <para>
            	Compilando e executando, teremos o resultado...                
<screen>
Running "main"...
Failure!: this_test_should_fail -> Problem at [first_test.c] line [8]
Completed "main": 1 pass, 1 failure, 0 exceptions.
</screen>
                O <code>TextReporter</code>, criado pela chamada
                <code>create_text_reporter()</code>, é o jeito simples para
                imprimir o resultado dos testes.
                Ele somente envia os testes com falha.
                Atualmente ele é o único método suportado.
      </para>
  </section>
  <section xml:id="tdd">
    <title>Fazendo TDD em cinco minutos com Cgreen</title>
      <para>
                Para um exemplo mais real precisamos de algo para testar.
                Nós pretendemos escrever uma função que separe as palavras
                de uma sentença.
                Ela faz isso substituindo quaisquer espaços com terminadores
                de palavras e retornando o número de conversões mais um.
                Aqui está um exemplo do que temos em mente...
<programlisting>
char *sentence = strdup("Just the first test");
word_count = split_words(sentence);
</programlisting>
                <code>sentence</code> pode agora apontar para
                <code>"Just\0the\0first\0test"</code>.
                Não é obviamente uma função muito útil, mas usaremos 
                isso para algo mais prático em breve.
      </para>
      <para>
                Desta vez nós adicionaremos um pouco mais de estrutura em nossos testes.
                Em vez de termos os testes em um programa único, nós separaremos
                o principal dos de casos de teste.
                Desta forma, vários suites de teste dos casos de teste podem ser
                incluídos no <code>main()</code> do arquivo principal.
                Isto nos dará menos trabalho para adicionar mais testes.
      </para>
      <para>
                Aqui está o, até agora vazio, caso de teste em <filename>words_test.c</filename>...
<programlisting>
#include "cgreen/cgreen.h"
<emphasis role="strong">
TestSuite *words_tests() {
TestSuite *suite = create_test_suite();
return suite;
}</emphasis>
</programlisting>
                Aqui está o <filename>all_tests.c</filename> teste principal...
<programlisting>
#include "cgreen/cgreen.h"

TestSuite *words_tests();

int main(int argc, char **argv) {
TestSuite *suite = create_test_suite();<emphasis role="strong">
add_suite(suite, words_tests());</emphasis>
if (argc > 1) {<emphasis role="strong">
  return run_single_test(suite, argv[1], create_text_reporter());</emphasis>
}
return run_test_suite(suite, create_text_reporter());
}
</programlisting>
                Cgreen possui dois jeitos de executar os testes.
                O padrão é cada teste ser executado dentro do seu próprio processo.
                Isto é oque acontece se você invoca <code>run_test_suite()</code>.
                Enquanto isto faz todos os testes independentes, a constante <code>fork()</code>
                pode complicar o debug.
                Para deixar o debug simples, Cgreen não faz <code>fork()</code> 
                quando um único teste é executado pelo nome com <code>run_single_test()</code>. 
      </para>
      <para>
                Building este suporte...
<screen>
gcc -c words_test.c
gcc -c all_tests.c
gcc words_test.o all_tests.o -lcgreen -o all_tests
</screen>
                ...e executando temos o resultado...                
<screen>
Running "main"...
Completed "main": 0 passes, 0 failures, 0 exceptions.
</screen>
                Todo este suporte (scaffolding) é puro adendo, mas a partir de agora adicionar 
                novos testes irá ser muito fácil.
      </para>
      <para>
                Aqui está um primeiro teste de <code>split_words()</code>...
<programlisting>
#include "cgreen/cgreen.h"<emphasis role="strong">
#include "words.h"
#include &lt;string.h&gt;

void word_count_returned_from_split() {
char *sentence = strdup("Birds of a feather");
int word_count = split_words(sentence);
assert_equal(word_count, 4);
free(sentence);
}</emphasis>

TestSuite *words_tests() {
TestSuite *suite = create_test_suite();<emphasis role="strong">
add_test(suite, word_count_returned_from_split);</emphasis>
return suite;
}
</programlisting>
                A macro <code>assert_equal()</code> recebe dois valores para comparar.
                Como padrão as mensagens são enviadas para <code>STDOUT</code> pelo 
                <code>TextReporter</code>. 
      </para>
      <para>
                Para compilar isso precisamos criar o arquivo de cabeçalho
                <filename>words.h</filename>...
<programlisting>
int split_words(char *sentence);
</programlisting>
		...e para linkar o código nós precisamos de uma pequena função em 
                <filename>words.c</filename>...
<programlisting>
int split_words(char *sentence) {
return 0;
}
</programlisting>
    		Um build completo mais adiante...
<screen>
gcc -c all_tests.c
gcc -c words_test.c
gcc -c words.c
gcc all_tests.o words_test.o words.o -lcgreen -o all_tests
./all_tests
</screen>
                ...e nós temos uma resposta mais útil...
<screen>
Running "main"...
Failure!: words_tests -> word_count_returned_from_split ->
        [0] should match [4] at [words_test.c] line [8]
Completed "main": 0 passes, 1 failure, 0 exceptions.
</screen>
                O "segredo" é o encapsulamento dos testes.
                Isto vem da suite de teste, no qual podem ser encapsulados um 
                no outro, através da função de teste, e finalmente a mensagem vinda
                de uma afirmação (assertion).
                Na linguagem do Cgreen, uma falha é uma afirmação inadequada,
                uma excessão é acumulada quando um teste falha por alguma razão.
      </para>
      <para>
                Nós podemos fazer isto passar apenas retornando o valor 4.
                Fazendo TDD realmente em pequenos passos, você fazeria isso, 
                mas francamente este exemplo é muito simples.
                Em vez disso nós vamos ir direto para a refatoração... 
<programlisting>
<emphasis role="strong">#include &lt;string.h&gt;</emphasis>

int split_words(char *sentence) {<emphasis role="strong">
int i, count = 1;
for (i = 0; i &lt; strlen(sentence); i++) {
  if (sentence[i] == ' ') {
      count++;
  }
}
return count;</emphasis>
}
</programlisting>
		Existe um problema escondido aqui, mas nossos testes passarão
		então fingiremos que não fomos avisados..
      </para>
      <para>
                Hora de adicionar um novo teste.
                Queremos confirmar que a string está quebrada em palavras
                separadas...
<programlisting>
#include "cgreen/cgreen.h"
#include "words.h"
#include &lt;string.h&gt;

void word_count_returned_from_split() { ... }
<emphasis role="strong">
void spaces_should_be_converted_to_zeroes() {
char *sentence = strdup("Birds of a feather");
split_words(sentence);
int comparison = memcmp("Birds\0of\0a\0feather", sentence, strlen(sentence));
assert_equal(comparison, 0);
free(sentence); 
}</emphasis>

TestSuite *words_tests() {
TestSuite *suite = create_test_suite();
add_test(suite, word_count_returned_from_split);<emphasis role="strong">
add_test(suite, spaces_should_be_converted_to_zeroes);</emphasis>
return suite;
}
</programlisting>
                Com certeza, nós temos uma falha...
<screen>
Running "main"...
Failure!: words_tests -> spaces_should_be_converted_to_zeroes ->
        [-32] should match [0] at [words_test.c] line [16]
Completed "main": 1 pass, 1 failure, 0 exceptions.
</screen>
                Nada demais contando que ainda não escrevemos o código.
      </para>
      <para>
                A solução...
<programlisting>
int split_words(char *sentence) {
int i, count = 1;
for (i = 0; i &lt; strlen(sentence); i++) {
  if (sentence[i] == ' ') {<emphasis role="strong">
      sentence[i] = '\0';</emphasis>
      count++;
  }
}
return count;
}
</programlisting>
                ...revela nossa suspeita anterior...
<screen>
Running "main"...
Failure!: words_tests -> word_count_returned_from_split ->
        [2] should match [4] at [words_test.c] line [8]
Completed "main": 1 pass, 1 failure, 0 exceptions.
</screen>
                Nosso teste anterior falhou agora, porque modificamos a chamada
                <code>strlen()</code> no nosso loop.
                Movendo o cálculo do tamanho para fora do loop...                
<programlisting>
int split_words(char *sentence) {
int i, count = 1, <emphasis role="strong">length = strlen(sentence)</emphasis>;
for (i = 0; <emphasis role="strong">i &lt; length</emphasis>; i++) {
  ...
}
return count;
}
</programlisting>
                ...restaurando a ordem...
<screen>
Running "main"...
Completed "main": 2 passes, 0 failures, 0 exceptions.
</screen>
                É bom manter o código sob controle enquanto estamos escrevendo
                efetivamente, e debugar depois quando as coisas se tornarem mais
                complicadas.
      </para>
      <para>
                Isso vai ser melhorado mais em frente.
                Vamos fazer algo mais interessante.               
      </para>
  </section>
  <section xml:id="mock">
    <title>Oque são funções mock?</title>
      <para>
            	O próximo exemplo é mais realista.
                Ainda no nosso arquivo <filename>words.h</filename>, queremos escrever
                uma função que invoque uma callback em cada palavra na sentença.
                Algo como...
<programlisting>
void act_on_word(const char *word, void *memo) { ... }<emphasis role="strong">
words("This is a sentence", &amp;act_on_word, &amp;memo);</emphasis>
</programlisting>
                Aqui o ponteiro <code>memo</code> é apenas algum dado acumulado
                que a callback <code>act_on_word()</code> está trabalhando.
                Outras pessoas escreverão a função <code>act_on_world()</code> 
                e provavelmente muitas outras iguais a esta.
                A callback é na verdade um ponto flexível, e não é de interesse
                agora.
      </para>
      <para>
                A função em teste é a <code>words()</code> e nós queremos ter 
                certeza que ela caminhe na sentença corretamente, enviando palavras
                individuais como esta.
                Como testar isso?
      </para>
      <para>
                Vamos começar com uma palavra.
                Neste caso nós esperaríamos a callback ser invocada uma única vez
                com a única palavra, certo?
                Aqui está o teste para isso...
<programlisting>
...
#include &lt;stdlib.h&gt;
...<emphasis role="strong">
void mocked_callback(const char *word, void *memo) {
mock(word, memo);
}

void single_word_sentence_invokes_callback_once() {
expect(mocked_callback, want_string(word, "Word"), want(memo, NULL));
words("Word", &amp;mocked_callback, NULL);
}</emphasis>

TestSuite *words_tests() {
TestSuite *suite = create_test_suite();
...
add_test(suite, <emphasis role="strong">single_word_sentence_invokes_callback_once</emphasis>);
return suite;
}
</programlisting>
                Qual é a graça olhando para a função <code>mock()</code>?
      </para>
      <para>
                Uma mock é basicamente um objeto programável.
                Em C objetos são limitados a funções, então isto é a função mock.
                A macro <code>mock()</code> compara os parâmetros que estão chegando
                com os valores esperados e envia mensagens para o suite de teste
                se há alguma falha.
                Ela também retorna quaisquer valores que tenham sido pré-programados
                no teste.
      </para>
      <para>
                A função teste é <code>single_word_sentence_invokes_callback_once()</code>.
                Usando a macro <code>expect()</code> ela programa a função mock 
                para esperar uma simples chamada.
                Esta chamada terá parâmetros <code><![CDATA["Word"]]></code> e
                <code>NULL</code>.
                Se eles não forem iguais depois, nós teremos um teste com falha.
      </para>
      <para>
                Somente o método do teste, não a callback mock, é adicionado ao
                suite de teste.
      </para>
      <para>
                Para uma compilação e linkagem com sucesso, o arquivo <filename>words.h</filename>
                deve agora parecer como...
<programlisting>
int split_words(char *sentence);<emphasis role="strong">
void words(const char *sentence, void (*walker)(const char *, void *), void *memo);</emphasis>
</programlisting>
                ...e o arquivo <filename>words.c</filename> pode ter o trecho...
<programlisting><emphasis role="strong">
void words(const char *sentence, void (*walker)(const char *, void *), void *memo) {
}</emphasis>
</programlisting>
		Isso mostra-nos as falhas esperadas nos testes.. 
<screen>
Running "main"...
Failure!: words_tests -> single_word_sentence_invokes_callback_once ->
        Call was not made to function [mocked_callback] at [words_test.c] line [25]
Completed "main": 2 passes, 1 failure, 0 exceptions.
</screen>
		CGreen avisa que a callback nunca foi utilizada.
                Cgreen reports that the callback was never invoked.
                Nos podemos facilmente passar o teste preenchendo a implementação
                com...
<programlisting>
void words(const char *sentence, void (*walker)(const char *, void *), void *memo) {
<emphasis role="strong">(*walker)(sentence, memo);</emphasis>
}
</programlisting>
		Isto é, nós somente invocamos isso uma vez com toda a string.
                Este é uma medição temporária que nos ajudará a continuar.
                Agora qualquer coisa pode passar, ainda que isto não esteja muito 
                testado ainda.
      </para>
      <para>
                Isso foi tudo convencional, mas vamos abordar o caso de separação
                da sentença.
                Aqui a função de teste será adicionada em <filename>words_test.c</filename>...
<programlisting>
void phrase_invokes_callback_for_each_word() {<emphasis role="strong">
expect(mocked_callback, want_string(word, "Birds"));
expect(mocked_callback, want_string(word, "of"));
expect(mocked_callback, want_string(word, "a"));
expect(mocked_callback, want_string(word, "feather"));</emphasis>
words(<emphasis role="strong">"Birds of a feather"</emphasis>, &amp;mocked_callback, NULL);
}
</programlisting>
		Cada chamada é esperada em sequẽncia.
                Todas as falhas, ou sem chamadas, ou extra chamadas, e podemos
                vê-las.
                Podemos ver tudo isso quando rodamos os testes...
<screen>
Running "main"...
Failure!: words_tests -> phrase_invokes_callback_for_each_word ->
        Wanted [Birds], but got [Birds of a feather] in function [mocked_callback] parameter [word] at [words_test.c] line [30]
Failure!: words_tests -> phrase_invokes_callback_for_each_word ->
        Call was not made to function [mocked_callback] at [words_test.c] line [31]
Failure!: words_tests -> phrase_invokes_callback_for_each_word ->
        Call was not made to function [mocked_callback] at [words_test.c] line [32]
Failure!: words_tests -> phrase_invokes_callback_for_each_word ->
        Call was not made to function [mocked_callback] at [words_test.c] line [33]
Completed "main": 4 passes, 4 failures, 0 exceptions.
</screen>
                A primeira falha conta a história.
                Nossa pequena função <code>words()</code> chamou a callback mock 
                com toda a sequência.
                Isto faz sentido, porque aquela era o jeito para pegar o 
                próximo teste.
      </para>
      <para>
                Embora não seja relevante neste guia, eu não posso resistir em pegar
                esses tester para passar.
                Além disso, nós fizemos uso da função que nós criamos anteriormente...
<programlisting>
void words(const char *sentence, void (*walker)(const char *, void *), void *memo) {<emphasis role="strong">
char *words = strdup(sentence);
int word_count = split_words(words);
char *word = words;
while (word_count-- > 0) {
  (*walker)(word, memo);
  word = word + strlen(word) + 1;
}
free(words);</emphasis>
}
</programlisting>
		E com esse trabalho somos recompensados com...
<screen>
Running "main"...
Completed "main": 8 passes, 0 failures, 0 exceptions.
</screen>
                Mais trabalho do que eu gostaria de admitir, mas isso me pegou
                três vezes para funcionar.
                Primeiramente esqueci-me o <code>+ 1</code> adicionado no <code>strlen()</code>,
                então esqueci de trocar <code>sentence</code> para <code>word</code>
                na chamada <code>(*walker)()</code>, e finalmente a terceira vez foi sorte.
                É claro rodando os testes cada vez que eram feitos esses erros 
                muito óbvios.
                Gastei mais tempo para escrever esses parágrafos do que para 
                escrever o código.
      </para>
  </section>
  
