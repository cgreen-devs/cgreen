        <para>
            Quando testamos você espera que eles estejam corretos.
            Eventos aleatórios podem destruir a confiabilidade na suite de
            testes e forçar execuções extras para ter certeza que estão certos.
            Um bom teste coloca o assunto a ser testado dentro de um ambiente isolado
            e controlado.
            Uma câmara de testes se você preferir.
            Isto fazem os testes rápidos, repetitivos e confiáveis.
        </para>
        <para>
            Para criar uma câmare de testes para o código de teste, nós temos que
            controlar todas as chamadas para fora do nosso código sob teste.
            Nos iremos acreditar na falha dos nossos testes se o nosso código faz
            uma chamada para a internet por exemplo.
            A Internet pode falhar por si só.
            Não só não temos total controle, mas pode ser necessário ter componentes
            funcionais antes de poder testar o código de alto nível.
            Isto torna difícil testar códigos em outras camadas.
        </para>
        <para>
            A solução para este dilema é escrever um código falso (stub) para o componente
            enquanto o código de alto nível é escrito.
            Isto polui a base do código com código temporário, e o isolamento do 
            teste desaparece quando o sistema eventualmente é modificado.
        </para>
        <para>
            O ideal é ter um mínimo de stubs escrito para cada teste individual.
            Cgreen encoraja esta abordagem fazendo tais testes faceis de escrever.
        </para>
        <section xml:id="problem">
           <title>O problema com streams</title>
            <para>
                Como testar este código... ?
<programlisting>
char *read_paragraph(<emphasis role="strong">int (*read)(void *), void *stream</emphasis>) {
    int buffer_size = 0, length = 0;
    char *buffer = NULL;
    int ch;
    while (<emphasis role="strong">(ch = (*read)(stream)) != EOF</emphasis>) {
        if (++length > buffer_size) {
            buffer_size += 100;
            buffer = realloc(buffer, buffer_size + 1);
        }
        if ((buffer[length] = ch) == '\n') {
            break;
        }
    }
    return buffer;
}
</programlisting>
                Isto é um filtro de stream genérico que troca o caractere recebido
                em C strings dentro de parágrafos.
                Cada chamada cria um parágrafo, retornando um ponteiro ou retornando
                <code>NULL</code> se não há parágrafo.
                O parágrafo tem uma memória alocada e o stream avança lendo a próxima
                chamada.
                Tem pouca funcionalidade, e poucas condições.
                Eu realmente quero que este código seja testado antes de usa-lo.
            </para>
            <para>
                O problema é a dependência do stream.
                Nós podemos usar uma stream real, mas pode causar todos os tipos 
                de dores de cabeça.
                Ele faz o teste da formatação do parágrafo dependente de um stream 
                funcional.
                Ele significa que nós temos que escrever o stream primeiro, codificar 
                de baixo para cima em vez de cima para baixo.
                Ele também significa configurar recursos externos.
                Isto é mais trabalho, execução lenta, e pode gerar resultados falsos dos
                testes. 
            </para>
            <para>
                Em contraste nós podemos escrever um simulador de stream para cada
                teste, chamado &quot;server stub&quot;.
            </para>
            <para>
                Por exemplo, quando o stream é vazio nada acontece.
                Nós recebemos um <code>NULL</code> de <code>read_paragraph</code> quando
                o stream é exausto.
                Isso é, ele somente retorna um stream steady de <code>EOF</code>s. 
            
                For example, when the stream is empty nothing should happen.
                We hopefully get <code>NULL</code> from <code>read_paragraph</code>
                when the stream is exhausted.
                That is, it just returns a steady stream of <code>EOF</code>s.
<programlisting>
static <emphasis role="strong">int empty_stream(void *stream) {
    return EOF;
}</emphasis>

static void reading_lines_from_empty_stream_gives_null() {
    assert_equal(read_paragraph(<emphasis role="strong">&amp;empty_stream, NULL</emphasis>), NULL);
}

TestSuite *stream_tests() {
    TestSuite *suite = create_test_suite();
    add_test(suite, reading_lines_from_empty_stream_gives_null);
    return suite;
}
</programlisting>
                Nossa simulação está facil aqui, por que nosso stream falso retorna somente
                um valor.
                As coisas são difíceis quando o resultado da função muda de chamada a chamada
                como um stream real pode ser.
                Simulando isto pode significar confusão com variáveis estáticas e contadores que
                são reiniciados para cada teste.
                E, nós vamos escrever poucos stubs.
                Com frequentes diferenças em cada teste.
                Ficando muito confuso.
            </para>
            <para>
                Cgreen manipula esta desorganização para nós deixando nós escrever
                uma função única para todos os nossos testes.
            </para>
        </section>
        <section xml:id="stubs">
           <title>Gravando e tocando</title>
            <para>
                Nós podemos refazer nosso exemplo criando a função <code>stub_stream()</code>
                (qualquer nome vai fazer)...
                
                We can redo our example by creating a <code>stub_stream()</code> function
                (any name will do)...
<programlisting>
<emphasis role="strong">static int stub_stream(void *stream) {
    return (int)mock();
}</emphasis>
</programlisting>
                Trivial nosso servidor de stub acima,
                ele é somente um macro para gerar um retorno do valor,
                mas nós podemos reusar isto depois de cada teste.
            </para>
            <para>
                Para o nosso simples exemplo acima nos apenas dizemos para ele sempre 
                retornar <code>EOF</code>...
<programlisting>
static int stub_stream(void *stream) {
    return (int)mock();
}

static void reading_lines_from_empty_stream_gives_null() {
    <emphasis role="strong">always_return(stub_stream, EOF);</emphasis>
    assert_equal(read_paragraph(stub_stream, NULL), NULL);
}
</programlisting>
                A macro <code>always_return()</code> recebe como argumento o nome
                da função e retorna o valor.
                Nós tinhamos dito para <code>stub_stream()</code> sempre retornar
                <code>EOF</code> quando chamado.
                
                The <code>always_return()</code> macro takes as arguments the
                function name and the return value.
                We have told <code>stub_stream()</code> to always return
                <code>EOF</code> when called.
            </para>
            <para>
                Vamos ver se o nosos código de produção atualmente funciona...
<screen>
Running "main"...
Completed "main": 1 pass, 0 failures, 0 exceptions.
</screen>
     	    Tão curso, tão bom.
	        No próximo teste.
            </para>
            <para>
                Se você quer testar uma linha com um caracter, nos temos que enviar o
                terminador <code>EOF</code> ou <code>"\n"</code> bem como
                um único caracter.
                De outra maneira nosso código entrará em loop eterno, pegando uma linha
                infinita de caracteres.
            </para>
            <para>
                Aqui está como nós podemos fazer isto...
<programlisting>
static void one_character_stream_gives_one_character_line() {<emphasis role="strong">
    will_return(stub_stream, 'a');
    will_return(stub_stream, EOF);</emphasis>
    char *line = read_paragraph(&amp;stub_stream, NULL);<emphasis role="strong">
    assert_string_equal(line, "a");</emphasis>
    free(line);
}
</programlisting>
                Diferente da instrução <code>always_return()</code>, <code>will_return()</code>
                ajusta somente um valor de retorno único.
                Ele atua como um modo de gravação e reprodução.
                Sucessivas instruções mapeiam o retorno da sequencia no qual é retornado uma
                vez quando o teste inicia.
            </para>
            <para>
                Nós vamos adicionar este teste na suite e executa-lo...
<screen>
Running "main"...
Failure!: stream_tests -> one_character_stream_gives_one_character_line ->
        [] should match [a] at [stream_test.c] line [19]
Completed "main": 1 pass, 1 failure, 0 exceptions.
</screen>
                Oops. Nosso código sob teste não funciona.
                Antes precisamos de um conserto...
<programlisting>
char *read_paragraph(int (*read)(void *), void *stream) {
    int buffer_size = 0, length = 0;
    char *buffer = NULL;
    int ch;
    while ((ch = (*read)(stream)) != EOF) {
        if (++length > buffer_size) {
            buffer_size += 100;
            buffer = realloc(buffer, buffer_size + 1);
        }
        if ((buffer[<emphasis role="strong">length - 1</emphasis>] = ch) == '\n') {
            break;
        }
    }
    return buffer;
}
</programlisting>
                Depois que está tudo bem... 
<screen>
Running "main"...
Completed "main": 2 passes, 0 failures, 0 exceptions.
</screen>
            </para>
            <para>
                Como fazer o stubs Cgreen?
                A chamada <code>will_return()</code> constroi uma lista estática de 
                valores retornados no qual são limpos entre os testes.
                A macro <code>mock()</code> captura a propriedade <code>__func__</code>.
                Ele usa isto para procurar entradas na lista retornada, e também para 
                gerar mensagem mais claras.
            </para>
            <para>
                Nós podemos passar nossos testes um pouco mais rápido agora... 
<programlisting>
static void one_word_stream_gives_one_word_line() {<emphasis role="strong">
    will_return(stub_stream, 't');
    will_return(stub_stream, 'h');
    will_return(stub_stream, 'e');</emphasis>
    always_return(stub_stream, EOF);
    assert_string_equal(read_paragraph(&amp;stub_stream, NULL), <emphasis role="strong">"the"</emphasis>);
}
</programlisting>
                Eu tenho sido um pouco malcraido.
                Como cada teste executa dentro de seu próprio processo, Eu não tenho
                me preocupado em liberar os ponteiros para parágrafos.
                Eu tenho somente deixado o sistema operacional fazer isto.
                Puristas podem querer adiconar uma limpeza adicional no código.
            </para>
            <para>
                Eu tenho usado também <code>always_return()</code> para a última instrução.
                Sem isto, se o stub recebe uma instrução no qual ele não espera, ele pode
                lançar uma falha no teste.
                Isto é muito restritivo, como nossa função <code>read_paragraph()</code>
                pode legitimamente chamar o stream depois dele ter executado no final.
                OK, esse pode ser um comportamento estranho, mas não é oque estamos testando aqui.
                Se tivéssemos, isto seria colocado em um teste próprio.
                A chamada <code>always_return()</code> diz para o <emphasis>Cgreen</emphasis> manter
                após a chamada das três letras, permitindo chamadas extras.
            </para>
            <para>
                Como nós construimos mais testes, eles iniciam procurando uma especificação do
                comportamento...
<programlisting>
static void drops_line_ending_from_word_and_stops() {<emphasis role="strong">
    will_return(stub_stream, 't');
    will_return(stub_stream, 'h');
    will_return(stub_stream, 'e');
    will_return(stub_stream, '\n');</emphasis>
    assert_string_equal(read_paragraph(&amp;stub_stream, NULL), <emphasis role="strong">"the"</emphasis>);
}
</programlisting>
                ...e com sorte...
<programlisting>
static void single_line_ending_gives_empty_line() {<emphasis role="strong">
    will_return(stub_stream, '\n');</emphasis>
    assert_string_equal(read_paragraph(&amp;stub_stream, NULL), <emphasis role="strong">""</emphasis>);
}
</programlisting>
                Por agora nos não temos que usar <code>always_return()</code>.
                Nós queremos deixar o stream aonde ela está, pronta para a próxima
                chamada de <code>read_paragraph()</code>.
                Se chamarmos o stream fora do final da linha, nos vamos ter falha.
            </para>
            <para>
                Acontecendo a falha mesmo assim... 
<screen>
Running "main"...
Failure!: stream_tests -> drops_line_ending_from_word_and_stops -> [the
] should match [the] at [stream_test.c] line [36]
Failure!: stream_tests -> single_line_ending_gives_empty_line -> [
] should match [] at [stream_test.c] line [41]
Completed "main": 3 passes, 2 failures, 0 exceptions.
</screen>
                Claramente nós passamos atravez do final da linha.
                Depois de outro conserto...
                
                Clearly we are passing through the line ending.
                Another fix later...
<programlisting>
char *read_paragraph(int (*read)(void *), void *stream) {
    int buffer_size = 0, length = 0;
    char *buffer = NULL;
    int ch;
    while ((ch = (*read)(stream)) != EOF) {
        if (++length > buffer_size) {
            buffer_size += 100;
            buffer = realloc(buffer, buffer_size + 1);
        }
        if ((buffer[length - 1] = ch) == '\n') {
            <emphasis role="strong">buffer[--length] = '\0';</emphasis>
            break;
        }
        buffer[length] = '\0';
    }
    return buffer;
}
</programlisting>
                E nós passamos novamente...
<screen>
Running "main"...
Completed "main": 5 passes, 0 failures, 0 exceptions.
</screen>
            </para>
            <para>
                Não há limites no número de métodos stubs nos testes, somente aqueles dois
                stubs não podem ter o mesmo nome.
                Então isto pode causar problemas...
<programlisting>
static int stub_stream(void *stream) {
    return (int)mock();
}
<emphasis role="strong">
static void bad_test() {
    will_return(stub_stream, 'a');
    do_stuff(&amp;stub_stream, &amp;stub_stream);
}</emphasis>
</programlisting>
                Será necessário ter dois stubs para fazer o teste correto...
<programlisting>
static int first_stream(void *stream) {
    return (int)mock();
}

static int second_stream(void *stream) {
    return (int)mock();
}
<emphasis role="strong">
static void good_test() {
    will_return(first_stream, 'a');
    will_return(second_stream, 'a');
    do_stuff(&amp;first_stream, &amp;second_stream);
}</emphasis>
</programlisting>
                Nos agora temos um jeito de escrever testes rápidos e limpos sem 
                nenhuma dependência externa.
                A informação ainda segue um caminho, do stub para o código sob teste.
                Quando o seu código chama um procedimento complexo, nos não queremos
                saber os efeitos que acontece.
                Isto é muito parecido com o trabalho de um detetive.
                E oque queremos?
                Nós somente queremos saber se estamos enviando as informações corretas.             
            </para>
            <para>
                As coisas se tornam mais interessantes quando pensamos no tráfego
                vindo de outro jeito, do código para o stub. 
                Isto nos coloca no mesmo território assim como os objetos mock.
            </para>
        </section>
        <section xml:id="mocks">
           <title>Configurando valores aguardados em funções mock</title>
            <para>
                Para trocar o sentido do tráfego, nós temos que olhar em um exemplo 
                contrário.
                Aqui está um código de produção préescrito.
<programlisting>
void by_paragraph(int (*read)(void *), void *in, <emphasis role="strong">void (*write)(void *, char *), void *out</emphasis>) {
    while (1) {
        char *line = read_paragraph(read, in);
        if (line == NULL) {
            return;
        }
        <emphasis role="strong">(*write)(out, line);</emphasis>
        free(line);
    }
}
</programlisting>
                Isto é o início do utilitário de formatação.
                Filtros anterirores vão provavelmente quebrar o parágrafo em texto
                justificado, mas agora isso é tudo abstraído atraz da interface
                <code>void write(void *, char *)</code>.
                Nossos interesses são: fazer ele passar atravez os parágrafo, e fazer 
                ele cair?
            </para>
            <para>
                Nos podemos testar a correta formatação do parágrafo escrevendo um 
                stub que coleta o parágrafo dentro de uma <code>struct</code>.
                Nos podemos então ficar a parte daquela <code>struct</code> e testar
                cada ponto com assertions.
                Este jeito é extremamente desajeitado em C.
                A linguagem não é apropriada para construir e destruir, nunca pense
                em navegar-las com assertions.
                Nós desorganizariamos nossos testes.
            </para>
            <para>
                Em vez disso nos testamos a saída assim que possível, como na
                chamada da função...
<programlisting>
...<emphasis role="strong">
void expect_one_letter_paragraph(char *paragraph, void *stream) {
    assert_string_equal(paragraph, "a", NULL);
}</emphasis>

void one_character_is_made_into_a_one_letter_paragraph() {
    by_paragraph(
            <emphasis role="strong">&amp;one_character_stream</emphasis>,
            NULL,
            <emphasis role="strong">&amp;expect_one_letter_paragraph</emphasis>,
            NULL);
}
...
</programlisting>
                Colocando assertions entre as funções mock, mantemos os testes
                mínimos.
                A idéia deste método é que voltamos a escrever funções individuais
                para cada teste.
                Nós temos o mesmo problema como tinhamos codificando stubs.
            </para>
            <para>
                Novamente, <emphasis>Cgreen</emphasis> tem um jeito para automatizar isto.
                Aqui está o teste reescrito...
<programlisting>
static int reader(void *stream) {
    return (int)mock(<emphasis role="strong">stream</emphasis>);
}

static void writer(void *stream, char *paragraph) {
    <emphasis role="strong">mock(stream, paragraph);</emphasis>
}

void one_character_is_made_into_a_one_letter_paragraph() {<emphasis role="strong">
    will_return(reader, 'a');
    always_return(reader, EOF);
    expect(writer, want_string(paragraph, "a"));</emphasis>
    by_paragraph(<emphasis role="strong">&amp;reader</emphasis>, NULL, <emphasis role="strong">&amp;writer</emphasis>, NULL);
}
</programlisting>
                Onde estão as assertions?
            </para>
            <para>
                Como nosso stub anterior, <code>reader()</code> pode agora verificar
                seus parâmetros.
                Em orientação a objeto, um objeto que checa seus próprios pararâmetros
                bem como simula comportamento é chamado de objeto mock.
                Por analogia <code>reader()</code> é uma função mock, ou um callback mock.
            </para>
            <para>
                Usando a macro <code>expect</code>, temos afirmado que <code>writer()</code> 
                será chamado apenas uma vez.
                Esta chamada deve ter a string <code>"a"</code> para o parâmetro 
                parágrafo.
                Se este parâmetro não casar, a função mock vai emitir uma falha para
                a suite de teste.
                Isto é oque nós evita escrever um monte de assertions.
                
                Using the <code>expect</code> macro, we have stated that
                <code>writer()</code> will be called just once.
                That call must have the string <code>"a"</code> for the
                paragraph parameter.
                If this parameter does not match, the mock function will
                issue a failure straight to the test suite.
                This is what saves us writing a lot of assertions.
            </para>
            <para>
                Aqui está uma lista de instruções que podem ser enviadas para mocks...
                <informaltable>
                  <tgroup cols="2">
                   <thead>
                     <row>
                      <entry>Macro</entry>
                      <entry>Parameters</entry>
                     </row>
                   </thead>
                  <tbody>
                       <row>
                         <entry><code>will_return(function, result)</code></entry>
                         <entry>Returns result once only, but successive calls will be replayed in order.
                          Generates a failure when called too many times.</entry>
                       </row>
                       <row>
                         <entry><code>always_return(function, result)</code></entry>
                         <entry>Returns result repeatedly.</entry>
                       </row>
                       <row>
                         <entry><code>expect(function, arguments...)</code></entry>
                         <entry>Sets up an expectation on each argument. If there is a mismatch, or a
                          call is made without an expectation, a failure is generated.</entry>
                       </row>
                       <row>
                         <entry><code>always_expect(function, arguments...)</code></entry>
                         <entry>Must receive exactly these arguments from now on.</entry>
                       </row>
                       <row>
                         <entry><code>expect_never(function)</code></entry>
                         <entry>This function must not be called or a failure is generated.</entry>
                       </row>
                       <row>
                         <entry><code>will_respond(function, result, arguments...)</code></entry>
                         <entry>Combines <code>will_return()</code> and <code>expect()</code>.</entry>
                       </row>
                       <row>
                         <entry><code>always_respond(function, result, arguments...)</code></entry>
                         <entry>Combines <code>always_return()</code> and <code>always_expect()</code></entry>
                       </row>
                   </tbody>
                   </tgroup>
                </informaltable>
                The <code>expect_never()</code> macro is slightly different.
                It's only task is to confirm that a method was never run.
            </para>
            <para>
                The <code>will_respond()</code> macro combines the <code>will_return()</code>
                and the <code>expect()</code> calls into one call, as does <code>always_respond</code>.
            </para>
            <para>
                Each parameter can be tested with a constraint.
                Two constraints are available:
                <code>want(parameter, expected)</code> for integers and pointers, and
                <code>want_string(parameter, expected)</code> does a string comparison.
            </para>
            <para>
                Isto é uma questão de tempo, nos podemos rodar nossos testes...
<screen>
Running "main"...
Completed "main": 6 passes, 0 failures, 0 exceptions.
</screen>
                Para um caractere único funciona, nos podemos adicionalmente 
                especificar este comportamento.
                Primeiramente uma sequencia de entradas...                
<programlisting>
static void no_line_endings_makes_one_paragraph() {
    will_return(reader, 'a');
    will_return(reader, ' ');
    will_return(reader, 'b');
    will_return(reader, ' ');
    will_return(reader, 'c');
    always_return(reader, EOF);<emphasis role="strong">
    expect(writer, want_string(paragraph, "a b c"));</emphasis>
    by_paragraph(&amp;reader, NULL, &amp;writer, NULL);
}
</programlisting>
                Um programador mais inteligente do que eu iria colocar todos
                estas chamadas dentro de um loop.
                Próximo, checando a saída da sequencia... 
<programlisting>
static void line_endings_generate_separate_paragraphs() {
    will_return(reader, 'a');
    will_return(reader, '\n');
    will_return(reader, 'b');
    will_return(reader, '\n');
    will_return(reader, 'c');
    always_return(reader, EOF);<emphasis role="strong">
    expect(writer, want_string(paragraph, "a"));
    expect(writer, want_string(paragraph, "b"));
    expect(writer, want_string(paragraph, "c"));</emphasis>
    by_paragraph(&amp;reader, NULL, &amp;writer, NULL);
}
</programlisting>
                Como o stub <code>will_return()</code> acima, a chamada <code>expect()</code>
                segue um modelo de gravação e reprodução.
                Cada teste é uma chamada sucessiva.
                Esta sequencia confirma que nos temos <code>"a"</code>,
                <code>"b"</code> e <code>"c"</code> na ordem.
            </para>
            <para>
                Então iremos ter certeza que os ponteiros corretos são passados para a
                função correta.
                Isto é uma checagem mais realista dos parâmetros...
<programlisting>
static void resources_are_paired_with_the_functions() {
    will_respond(reader, 'a', want(stream, 1));
    always_respond(reader, EOF, want(stream, 1));
    expect(writer, want(stream, 2));
    by_paragraph(&amp;reader, (void *)1, &amp;writer, (void *)2);
}
</programlisting>
                E finalmente iremos especificar que a escrita não é chamada se não
                há parágrafo.
<programlisting>
static void empty_paragraphs_are_ignored() {
    will_return(reader, '\n');
    always_return(reader, EOF);<emphasis role="strong">
    expect_never(writer);</emphasis>
    by_paragraph(&amp;reader, NULL, &amp;writer, NULL);
}
</programlisting>
                Este último teste não está sendo feito...
<screen>
Running "main"...
Failure!: stream_tests -> empty_paragraphs_are_ignored ->
        Unexpected call to function [writer] at [stream_test.c] line [96]
Completed "main": 14 passes, 1 failure, 0 exceptions.
</screen>
                Obviamente linhas em branco ainda são enviadas para <code>writer()</code>.
                Uma vez que isto é apontado, o concerto é óbvio...
<programlisting>
void by_paragraph(int (*read)(void *), void *in, void (*write)(void *, char *), void *out) {
    while (1) {
        char *line = read_paragraph(read, in);
        if (<emphasis role="strong">(line == NULL) || (strlen(line) == 0)</emphasis>) {
            return;
        }
        (*write)(out, line);
        free(line);
    }
}
</programlisting>
                Testes com <code>expect_never()</code> podem ser muito efetivos
                na descoberta sutil de bugs.
<screen>
Running "main"...
Completed "main": 14 passes, 0 failures, 0 exceptions.
</screen>
                Tudo feito.
            </para>
        </section>
