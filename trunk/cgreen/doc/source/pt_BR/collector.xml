        <section xml:id="collector">
         <title>A ferramenta collector</title>
            <para>
                Quando queremos adicionar um novo teste, acrescentamos no script
                de testes uma função do tipo void. E então adicionamos o nome do
                teste dentro da TestSuite.
                
                Em resumo cada novo teste deve ser adicionado na TestSuite para ele ser
                encontrado durante a execução dos testes.
            </para>
            <para>
                A ferramenta <emphasis role="strong">collector</emphasis> muda este 
                comportamento tedioso. A ideia da ferramenta é poupar o trabalho de 
                adicionar o teste criado na <code>TestSuite</code>. Basicamente cada teste passa 
                a ser declarado usando a macro Ensure no qual é inserida automaticamente
                na <code>TestSuite</code>. via a ferramenta <emphasis role="strong">collector</emphasis>.
            </para>                                             
        </section>
        <section xml:id="collector_example">
          <title>Exemplo prático</title>
            <para>
                Para utilizar a ferramenta collector necessitamos modificar as definições
                de cada função de teste. Antes usávamos:
<programlisting>
void one_should_assert_char_equal_to_one() {
	char x = 1;
	char y = 1;
    assert_equal(x, y);
}
</programlisting>
                Agora a função deve ser reescrita assim:
<programlisting>
<emphasis role="strong">Ensure</emphasis> one_should_assert_char_equal_to_one() {
	char x = 1;
	char y = 1;
    assert_equal(x, y);
}
</programlisting>
                
                Para cada teste escrito, declaramos como sendo do tipo <emphasis role="strong">Ensure</emphasis> 
                que é uma macro informando para a ferramenta que este teste deve ser colocado
                dentro da TestSuite.                
                </para>
                <para>
                Na TestSuite não precisamos mais descrever quais testes compõem a TestSuite. Podemos
                apenas deixar assim:
<programlisting>                
TestSuite *assertion_tests() {
    TestSuite *suite = create_test_suite();
    add_tests();
    return suite;
}                
</programlisting>                                
                Supondo que o nosso script de teste é <filename>assertion_tests.c</filename>, 
                executando o 'collector' temos:
<screen>                
./collector assertion_tests.c
</screen>

O resultado final no script de teste é:
<programlisting>
Ensure one_should_assert_char_equal_to_one() {
	char x = 1;
	char y = 1;
    assert_equal(x, y);
}

TestSuite *assertion_tests() {
    TestSuite *suite = create_test_suite(&amp;one_should_assert_char_equal_to_one);
    add_tests();
    return suite;
}
</programlisting>
          </para>
          <para>
                A ferramenta lê todo o script, faz a substituição necessária e escreve
                novamente no arquivo.
                Assim apenas adicionamos um novo teste e executamos a ferramenta collector
                para ajustar o TestSuite automaticamente.          
          </para>
        </section>
