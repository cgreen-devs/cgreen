      <para>
            Cgreen é uma ferramenta para construir testes de unidade na linguagem C.
            Eles são normalmente escritos ao longo do código de produção pelos programadores
            para prevenir bugs.
            Apesar dos testes serem escritos por desenvolvedores de software,
            eles são descritos de forma a serem entendidos, como parte da documentação do software.
            Usado desta maneira, a finalidade é garantir a qualidade constante.
      </para>
      <para>
            Em outras palavras você terá menos bugs.
      </para>
      <section xml:id="writing">
        <title>Escrevendo tests básicos</title>>
          <para>
                Testes utilizando o Cgreen são funções simples em C sem parâmetros e
                um retorno de valor <code>void</code>.
                Um exemplo poderia ser...
<programlisting>
static void <emphasis role="strong">strlen_of_hello_should_be_five</emphasis>() {
    <emphasis role="strong">assert_equal</emphasis>(strlen("Hello"), 5);
}
</programlisting>
                O nome da função de teste pode ser qualquer coisa que você queira.
                A chamada <code>assert_equal()</code> é um exemplo de assertion.
                Assertions enviam mensagens para o Cgreen, no qual podem ativar a
                saída de resultados.                
          </para>
          <para>
                Aqui estão os assertions padrões...
                <informaltable>
                  <tgroup cols="2">
                   <thead>
                     <row>
                      <entry>Assertion</entry>
                      <entry>Descrição</entry>
                     </row>
                   </thead>
                  <tbody>
                       <row>
                         <entry><code>assert_true(boolean)</code></entry>
                         <entry>Passa se o valor boleano é verdadeiro</entry>
                       </row>
                       <row>
                         <entry><code>assert_false(boolean)</code></entry>
                         <entry>Falha se o valor boleano é verdadeiro</entry>
                       </row>
                       <row>
                         <entry><code>assert_equal(first, second)</code></entry>
                         <entry>Passa se <code>first == second</code></entry>
                       </row>
                       <row>
                         <entry><code>assert_not_equal(first, second)</code></entry>
                         <entry>Passa se  <code>first != second</code></entry>
                       </row>
                       <row>
                         <entry><code>assert_string_equal(char *, char *)</code></entry>
                         <entry>Utiliza <code>strcmp()</code> e passa se as strings são iguais</entry>
                       </row>
                       <row>
                         <entry><code>assert_string_not_equal(char *, char *)</code></entry>
                         <entry>Utiliza <code>strcmp()</code> e falha se as strings são iguais</entry>
                       </row>
                   </tbody>
                   </tgroup>
                </informaltable>  
                A macro para assertion boleano aceita valor <code>int</code>.
                As assertions de igualdade aceitam qualquer tipo no qual pode ser
                convertido para <code>intptr_t</code> e feita uma simples
                operação de <code>==</code>.
                A comparação de strings é ligeiramente diferente da utilizada na 
                <code>strcmp()</code> biblioteca de funções <code>&lt;string.h&gt;</code>.
                Se <code>assert_equal()</code> for utilizada em ponteiros <code>char *</code>
                então eles devem apontar para a mesma string.                
          </para>
          <para>
                Cada assertion tem uma mensagem default de comparação entre os dois valores.
                Se você deseja substituir pela sua própria mensagem então você deve usar
                as funções <code>*_with_message()</code>.
                <informaltable>
                  <tgroup cols="1">
                   <thead>
                     <row>
                      <entry>Assertion</entry>
                     </row>
                   </thead>
                   <tbody>
                     <row>
                       <entry><code>assert_true_with_message(boolean, message, ...)</code></entry>
                     </row>
                     <row>
                       <entry><code>assert_false_with_message(boolean, message, ...)</code></entry>
                    </row>
                    <row>
                      <entry><code>assert_equal_with_message(first, second, message, ...)</code></entry>
                    </row>
                    <row>
                      <entry><code>assert_not_equal_with_message(first, second, message, ...)</code></entry>
                    </row>
                    <row>
                      <entry><code>assert_string_equal_with_message(char *, char *, message, ...)</code></entry>
                    </row>
                    <row>
                      <entry><code>assert_string_not_equal_with_message(char *, char *, message, ...)</code></entry>
                    </row>
                    </tbody>
                    </tgroup>
                </informaltable>                                
                Todas as assertions possuem um parâmetro adicional <code>char *</code> no qual 
                é a mensagem que você deseja mostrar em caso de falha.
                Se o parâmetro for <code>NULL</code>, então a mensagem padrão é 
                utilizada.
                A afirmação mais útil deste grupo é <code>assert_true_with_message()</code>
                você pode usa-la para criar sua própria assertion de funções com
                mensagens próprias.                
          </para>
          <para>
                Atualmente as macros de assertion possuem uma lista de argumentos variáveis.
                A mensagem de falha segue o template da função <code>printf()</code>.
                Nos podemos mudar o teste acima para...                
<programlisting>
static void strlen_of_hello_should_be_five() {
    const char *greeting = "Hello";
    int length = strlen(greeting);
    assert_equal_with_message(length, 5,
            <emphasis role="strong">"[%s] should be 5, but was %d"</emphasis>, greeting, length);
}
</programlisting>
                Uma mensagem mais amigável para o usuário quando as coisas derem errado.                
          </para>
          <para>
                Para o teste acima funcionar é necessário executa-lo em uma test suite.
                Podemos cria-la explicitamente para este teste com...
<programlisting>
<emphasis role="strong">TestSuite *our_tests() {
    TestSuite *suite = create_test_suite();
    add_test(suite, strlen_of_hello_should_be_five);
    return suite;
}</emphasis>
</programlisting>
                No caso você viu que <code>strlen_of_hello_should_be_five()</code>
                deve ter &amp; comercial na frente dele, <code>add_test()</code>
                é uma macro.
                O <code>&amp;</code> é adicionado automaticamente.                 
          </para>
          <para>
                Para executar o test suite, nos chamamos <code>run_test_suite()</code>.
                Esta função limpa todo o teste depois de executa-lo, então podemos 
                escrever...
<programlisting>
<emphasis role="strong">run_test_suite(our_tests(), create_text_reporter());</emphasis>
</programlisting>
                Os resultados das assertions são passadas e as falhas são coletadas via um
                callback definido pela estrutura <code>TestReporter</code>.
                A única definição prédefinida no Cgreen é o <code>TextReporter</code> no qual
                emite as mensagens em texto plano.
          </para>
          <para>
                O script de teste agora se parece com isso...
<programlisting>
<emphasis role="strong">#include "cgreen/cgreen.h"
#include &lt;string.h&gt;</emphasis>

static void strlen_of_hello_should_be_five() {
    assert_equal(strlen("Hello"), 5);
}

TestSuite *our_tests() {
    TestSuite *suite = create_test_suite();
    add_test(suite, strlen_of_hello_should_be_five);
    return suite;
}

<emphasis role="strong">int main(int argc, char **argv) {
    return </emphasis>run_test_suite(our_tests(), create_text_reporter());<emphasis role="strong">
}</emphasis>
</programlisting>
                O valor de retorno do <code>run_test_suite()</code> é um código 
                Unix para exit.
          </para>
          <para>
                Compilando e executando temos...
<screen>
gcc -c strlen_test.c
gcc strlen_test.o cgreen/cgreen.a -o strlen_test
./strlen_test<emphasis role="strong">
Running "main"...
Completed "main": 1 pass, 0 failures, 0 exceptions.</emphasis>
</screen>
                As mensagens do teste somente são mostradas em caso de falhas.
                Se você quebras seus testes...
<programlisting>
static void strlen_of_hello_should_be_five() {
    assert_equal(strlen(<emphasis role="strong">"Hiya"</emphasis>, 5);
}
</programlisting>
                ...nós teremos uma mensagem...
<screen>
Running "main"...<emphasis role="strong">
Failure!: strlen_of_hello_should_be_five ->
        [5] shold be [4] at [strlen_test.c] line [6]</emphasis>
Completed "main": 0 passes, 1 failure, 0 exceptions.
</screen>
                Cgreen apenda a localização da falha do teste na nossa string de erro.
          </para>
          <para>
                Uma vez que temos a estrutura básica para os testes, é fácil adicionar 
                mais testes.
                Adicionar um teste para <code>strlen()</code> com uma string vazia
                por exemplo...
<programlisting>
...<emphasis role="strong">
static void strlen_of_empty_string_should_be_zero() {
    assert_equal(strlen("\0"), 0);
}</emphasis>

TestSuite *<emphasis role="strong">our_tests</emphasis>() {
    TestSuite *suite = create_test_suite();
    add_test(suite, strlen_of_hello_should_be_five);<emphasis role="strong">
    add_test(suite, strlen_of_empty_string_should_be_zero);</emphasis>
    return suite;
}
...
</programlisting>
                E assim por diante.
          </para>
        </section>
        <section xml:id="fixtures">
          <title>Set up e tear down</title>
          <para>
                É comum para a suite de teste ter muito código duplicado,
                especialmente quando são configurador testes similares.
                Olha o exemplo com um banco de dados...
<programlisting>
#include "cgreen/cgreen.h"
#include &lt;stdlib.h&gt;
#include &lt;mysql/mysql.h&gt;
#include "person.h"
<emphasis role="strong">
static void create_schema() {
    MYSQL *connection = mysql_init(NULL);
    mysql_real_connect(connection, "localhost", "me", "secret", "test", 0, NULL, 0);
    mysql_query(connection, "create table people (name, varchar(255) unique)");
    mysql_close(connection);
}

static void drop_schema() {
    MYSQL *connection = mysql_init(NULL);
    mysql_real_connect(connection, "localhost", "me", "secret", "test", 0, NULL, 0);
    mysql_query(connection, "drop table people");
    mysql_close(connection);
}</emphasis>

static void can_add_person_to_database() {
    <emphasis role="strong">create_schema();</emphasis>
    Person *person = create_person();
    set_person_name(person, "Fred");
    save_person(person);
    Person *found = find_person_by_name("Fred");
    assert_string_equal(get_person_name(person), "Fred");
    <emphasis role="strong">drop_schema();</emphasis>
}

static void cannot_add_duplicate_person() {
    <emphasis role="strong">create_schema();</emphasis>
    Person *person = create_person();
    set_person_name(person, "Fred");
    assert_true(save_person(person));
    Person *duplicate = create_person();
    set_person_name(duplicate, "Fred");
    assert_false(save_person(duplicate));
    <emphasis role="strong">drop_schema();</emphasis>
}

TestSuite *person_tests() {
    TestSuite *suite = create_test_suite();
    add_test(suite, can_add_person_to_database);
    add_test(suite, cannot_add_duplicate_person);
    return suite;
}

int main(int argc, char **argv) {
    return run_test_suite(person_tests(), create_text_reporter());
}
</programlisting>
                Nós já haviamos retirado o código duplicado e separado nas funções
                <code>create_scheme()</code> and <code>drop_schema()</code>, então
                as coisas não estão tão ruins.
                Até o momento ainda não.
                Oque acontece se temos uma dúzia de testes deste tipo?
                Por exemplo um teste mais complicado como <link xlink:href="http://www.martinfowler.com/eaaCatalog/activeRecord.html">ActiveRecord</link>,
                tendo dúzias de testes muito parecidos.                
          </para>
          <para>
                Nós podemos fazer com que o Cgreen faça o trabalho para nós
                declarando estes métodos como funções <code>setup()</code> e
                <code>teardown()</code> na suite de testes.
          </para>
          <para>
                Aqui está a nova versão...
<programlisting>
...
static void <emphasis role="strong">create_schema()</emphasis> { ... }

static void <emphasis role="strong">drop_schema()</emphasis> { ... }

static void can_add_person_to_database() {
    Person *person = create_person();
    set_person_name(person, "Fred");
    save_person(person);
    Person *found = find_person_by_name("Fred");
    assert_string_equal(get_person_name(person), "Fred");
}

static void cannot_add_duplicate_person() {
    Person *person = create_person();
    set_person_name(person, "Fred");
    assert_true(save_person(person));
    Person *duplicate = create_person();
    set_person_name(duplicate, "Fred");
    assert_false(save_person(duplicate));
}

TestSuite *person_tests() {
    TestSuite *suite = create_test_suite();<emphasis role="strong">
    setup(suite, create_schema);
    teardown(suite, drop_schema);</emphasis>
    add_test(suite, can_add_person_to_database);
    add_test(suite, cannot_add_duplicate_person);
    return suite;
}
...
</programlisting>
                Com estas nova forma Cgreen executa a função <code>create_schema()</code> 
                antes de cada teste, e a função <code>drop_schema()</code> 
                depois de cada teste.
                Isto salva a digitação repetitiva e reduz as chances de acidentes.
                Isto também fazem os testes mais focados.
          </para>
          <para>
                A razão para nós tentarmos retirar fora tudo das funções de teste é que
                a suite de teste atua como documentação.
                No exemplo <filename>person.h</filename> nós podemos facilmente ver que <code>Person</code>
                tem algum tipo de propriedade, e o valor desta propriedate tem que ser único.
                Para que os testes atuem como uma especificação legível nós temos que
                remover toda gordura o máximo possível.                 
          </para>
          <para>
                Alguns detalhes.
                Atualmente apenas um <code>setup()</code> e <code>teardown()</code>
                podem ser adicionados em cada <code>TestSuite</code>.
                Também a função <code>teardown()</code> pode não executar se algum teste
                der errado (crash), causando algumas interferências nos testes.
                Isso nós prepara para a próxima seção...
          </para>
        </section>
        <section xml:id="fork">
           <title>Each test in it's own process</title>
          <para>
                Considere este teste...
<programlisting><emphasis role="strong">
void will_seg_fault() {
    int *p = NULL;
    (*p)++;
}</emphasis>
</programlisting>
                Crash não é algo que normalmente queremos quando um teste está em
                execução.
                Não menos importante, isto irá parar o recebimento da saída dos testes
                que você precisa para resolver o problema.
          </para>
          <para>
                Para prevenir segmentation faults e outros problemas que interrompam a 
                suite de testes, Cgreen executa todos os testes dentro de seu próprio 
                processo.
          </para>
          <para>
                Antes da chamada <code>setup()</code>, Cgreen faz um <code>fork()</code>.
                O processo principal aguarda o teste ser completado normalmente ou não.
                Incluindo o <code>teardown()</code>.
                Se o processo falha, uma exception é reportada e o processo de teste principal
                coleta.
          </para>
          <para>
                Por exemplo...
<programlisting>
#include "cgreen/cgreen.h"
#include &lt;stdlib.h&gt;
<emphasis role="strong">
static void will_seg_fault() {
    int *p = NULL;
    (*p)++;
}</emphasis>

int main(int argc, char **argv) {
    TestSuite *suite = create_test_suite();
    add_test(suite, <emphasis role="strong">will_seg_fault</emphasis>);
    run_test_suite(suite, create_text_reporter());
}
</programlisting>
                Quando compilamos e executamos, temos...
<screen>
Running "main"...
Exception!: will_seg_fault -> Test "will_seg_fault" failed to complete
Completed "main": 0 passes, 0 failures, 1 exception.
</screen>
                A coisa obvia a ser feita agora é disparar o debugger.
                Infelizmente, o <code>fork()</code> de processos pelo Cgreen pode ser
                uma complicação extra durante o debugger.
          </para>
          <para>
                Para contornar isto, e também para permir a executação de um teste
                por vez, Cgreen possui a função <code>run_single_test()</code>.
                A assinatura dos métodos de execução são...                
              <itemizedlist mark='opencircle'>
                <listitem><para><code>int run_test_suite(TestSuite *suite, TestReporter *reporter);</code></para></listitem>
                <listitem><para><code>int run_single_test(TestSuite *suite, char *test, TestReporter *reporter);</code></para></listitem>
              </itemizedlist>
                Os parametros extras de <code>run_single_test()</code>, a string
                <code>test</code>, é o nome do teste selecionado.
                Isto pode ser qualquer teste, até mesmo dentro das suite de testes (veja a seguir). 
          </para>
          <para>
                Aqui está como nos podemos usar o debug no teste com problemas.
<programlisting>
int main(int argc, char **argv) {
    TestSuite *suite = create_test_suite();
    add_test(suite, will_seg_fault);
    <emphasis role="strong">run_single_test(suite, "will_seg_fault", create_text_reporter());</emphasis>
}
</programlisting>
                Quando executamos desta maneira, Cgreen não irã fazer <code>fork()</code>.
          </para>
          <para>
                Isto contorna o caso de segmentation fault, mas e sobre a falha no processo
                causando a queda no loop?
          </para>
          <para>
                Bem, Cgreen pode esperar para sempre.
                Usando manipuladores de sinais em C, nos podemos colocar um limite no processo
                enviando uma interrupeção.
                Para evitar a necessidade de escrever o manipulador, Cgreen inclui a função
                <code>die_in()</code> para nos ajudar.
          </para>
          <para>
                Aqui está um exemplo limitando o tempo do teste...
<programlisting>
...
static void will_seg_fault() { ... }
<emphasis role="strong">
static void this_would_stall() {
    die_in(1);
    while(0 == 0) { }
}</emphasis>

int main(int argc, char **argv) {
    TestSuite *suite = create_test_suite();
    add_test(suite, will_seg_fault);
    add_test(suite, <emphasis role="strong">this_would_stall</emphasis>);
    run_test_suite(suite, create_text_reporter());
}
</programlisting>
                Quando executado, o código irá esperar por um segundo, e 
                finalizar com...
<screen>
Running "main"...
Exception!: will_seg_fault -> Test "will_seg_fault" failed to complete
Exception!: will_stall -> Test "this_would_stall" failed to complete
Completed "main": 0 passes, 0 failures, 2 exceptions.
</screen>
                Note que você vê o resultado do teste como ele é.
                Cgreen faz o stream do resultado tal como ele acontece, ficando fácil
                saber onde a suite de teste tem problema.
          </para>
          <para>
                Claro, que se você quiser configurar um limite de tempo geral em 
                todos os seus testes, então você pode adicionar o código <code>die_in()</code>
                na função <code>setup()</code>.
                Cgreen irá então aplica o limite para todos.
          </para>
        </section>
        <section xml:id="suites">
           <title>Construindo uma suite composta de testes</title>
          <para>
                A <code>TestSuite</code> é uma estrutura composta.
                Isto significa que as suites de testes podem ser adicionadas a suites 
                de testes, construindo uma árvore de estruturas que pode ser executada
                na ordem.   
          </para>
          <para>
                Vamos combinar os testes <code>strlen()</code> com os testes <code>Person</code>
                acima.
                Primeiramente nos precisamos remover a chamada <code>main()</code>.
                Isto é...
<programlisting>
#include "cgreen/cgreen.h"
#include &lt;string.h&gt;

static void strlen_of_hello_should_be_five() { ... }
static void strlen_of_empty_string_should_be_zero() { ... }

TestSuite *our_tests() {
    TestSuite *suite = create_test_suite();
    add_test(suite, strlen_of_hello_should_be_five);
    add_test(suite, strlen_of_empty_string_should_be_zero);
    return suite;
}
</programlisting>
                Então nos podemos escrever um pequeno chamado com a nova função
                <code>main()</code>...
<programlisting>
#include "strlen_tests.c"
#include "person_tests.c"
<emphasis role="strong">
TestSuite *our_tests();
TestSuite *person_tests();</emphasis>

int main(int argc, char **argv) {
    TestSuite *suite = create_test_suite();
    add_suite(suite, our_tests());
    add_suite(suite, person_tests());<emphasis role="strong">
    if (argc > 1) {</emphasis>
        return run_single_test(suite, <emphasis role="strong">argv[1]</emphasis>, create_text_reporter());<emphasis role="strong">
    }</emphasis>
    return run_test_suite(suite, create_text_reporter());
}
</programlisting>
                Normalmente é facil colocar os protótipos <code>TestSuite</code> dentro
                do código, ao invez de ter muitos arquivos de cabeçalho declarados.
                Este é o mesmo raciocínio que vamos usar para deixar os protótipos
                para testar as funções da suite.
                Nós podemos deixar como está, porque os testes são mais sobre
                documentação do que encapsulamento.
          </para>
          <para>
                Algumas vezes é útil ser capaz de executar um único teste a partir
                da linha de comando, por isso adicionamos um simples bloco <code>if</code>
                para pegar o nome do teste como um argumento opcional.
                Toda a suite de teste será analisada em busca do teste selecionado.
                Este jeito também poupa a recompilação quando vamos fazer debug.
          </para>
          <para>
                Nós colocamos cada suite de teste dentro de seu próprio arquivo, 
                mas não é necessário.
                Nós poderiamos ter muitas suites de teste dentro do mesmo arquivo, 
                mesmo encadeadas.
                Você pode até mesmo misturar funções de teste e teste suites em uma
                mesma suite de teste pai.
                Porém vai dar trabalho.
          </para>
          <para>
                Se você colocar várias suites de teste no mesmo arquivo, então todas as
                suites irão ser nomeadas da mesma forma dentro do breadcrumb na mensagem de
                texto.
                Elas serão todas nomeadas depois da função criadora.
                Se você quiser eivtar isso, ou somente nomear seus testes, você pode 
                <code>create_named_test_suite()</code> ao invez de <code>create_test_suite()</code>.
                Isto necessita de uma única string como parâmetro.
                Na realidade <code>create_test_suite()</code> é apenas uma macro que 
                inseri a constante <code>__func__</code> dentro de <code>create_named_test_suite()</code>.
          </para>
          <para>
                Oque aconte com <code>setup()</code> e <code>teardown()</code> no
                <code>TestSuite</code> que contém outro <code>TestSuite</code>s?
          </para>
          <para>
                Bem primeiramente, Cgreen não faz <code>fork()</code> quando executa a suite.
                Ele deixa a suite filha fazer <code>fork()</code> dos processos individuais.
                Desta maneira <code>setup()</code> e <code>teardown()</code> irão executar no processo
                principal.
                Eles irão ser executados uma vez para cada suite filha.
          </para>
          <para>
                Nos podemos usar isso para aumentar a velocidade do nosso teste
                <code>Person</code> acima.
                Relembrando que nós criamos uma nova conexão e fechamos novamente dentro
                do fixtures.
                Isto significa abrir e fechar muitas conexões.
                Com pouco risco de algum interferência dos testes, nós podemos 
                reusar a conexão atravez dos testes...
<programlisting>
...
static MYSQL *connection;

static void create_schema() {<emphasis role="strong">
    mysql_query(connection, "create table people (name, varchar(255) unique)");</emphasis>
}

static void drop_schema() {<emphasis role="strong">
    mysql_query(connection, "drop table people");</emphasis>
}

static void can_add_person_to_database() { ... }
static void cannot_add_duplicate_person() { ... }
<emphasis role="strong">
void open_connection() {
    connection = mysql_init(NULL);
    mysql_real_connect(connection, "localhost", "me", "secret", "test", 0, NULL, 0);
}

void close_connection() {
    mysql_close(connection);
}
</emphasis>
TestSuite *person_tests() {
    TestSuite *suite = create_test_suite();
    setup(suite, create_schema);
    teardown(suite, drop_schema);
    add_test(suite, can_add_person_to_database);
    add_test(suite, cannot_add_duplicate_person);
<emphasis role="strong">
    TestSuite *fixture = create_named_test_suite("Mysql fixture");
    add_suite(fixture, suite);
    setup(fixture, open_connection);
    teardown(fixture, close_connection);
    return fixture;</emphasis>
}
</programlisting>
                O segredo aqui é criar um wrapper para a suite de teste no qual
                tem o propósito de fazer um wrap na suite de teste principal para 
                o fixture.
                Este é o nosso ponteiro <code>fixture</code>.
                Este código é um pouco confuso, porque temos dois conjuntos de fixture 
                no mesmo script de teste.
          </para>
          <para>
                Nos temos o fixture para as conexões MySQL.
                Isto executa <code>open_connection()</code> e <code>close_connection()</code>
                somente uma vez no início e fim do teste person.
                Isto é porque o ponteiro <code>suite</code> é o único membro do
                <code>fixture</code>.
          </para>
          <para>
                Nos também temos a fixture para o schema, o <code>create_schema()</code>
                e <code>drop_schema()</code>, no qual é executado antes e depois de todo
                teste.
                Estas ainda estão vinculadas dentro do <code>suite</code>.
          </para>
          <para>
                No mundo real nós provavelmente colocariamos o fixture para a conexão 
                dentro de seu próprio arquivo...
<programlisting>
static MYSQL *connection;

MYSQL *get_connection() {
    return connection;
}

static void open_connection() {
    connection = mysql_init(NULL);
    mysql_real_connect(connection, "localhost", "me", "secret", "test", 0, NULL, 0);
}

static void close_connection() {
    mysql_close(connection);
}
<emphasis role="strong">
TestSuite *connection_fixture(TestSuite *suite) {</emphasis>
    TestSuite *fixture = create_named_test_suite("Mysql fixture");
    add_suite(fixture, suite);
    setup(fixture, open_connection);
    teardown(fixture, close_connection);
    return fixture;<emphasis role="strong">
}</emphasis>
</programlisting>
                Isto permite reusar fixtures comuns entre projetos.
          </para>
        </section>
